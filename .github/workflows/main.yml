name: Windows MSVC Static (Qt5 one-exe) + Tag/Release

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g. v2.0.0-RC1). If set, a tag will be created if missing."
        required: false
        type: string
      publish_release:
        description: "Publish GitHub Release?"
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: "5.15.2"
      QT_TRIPLET: "msvc2019_64"
      QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache (qtbase only)
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v4"

      - name: Install Python (for aqt) if building qtbase
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Perl (required)
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.32"

      - name: Install aqt
        run: |
          pip install "aqtinstall==3.1.*"

      - name: Ensure Qt sources present
        shell: pwsh
        run: |
          if (-not (Test-Path 'C:\qt-src\5.15.2\Src')) {
            python -m aqt install-src windows desktop 5.15.2 --outputdir 'C:\qt-src'
          }

      - name: Configure + Build + Install Qt (static + /MT) if not cached
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          cd /d %QT_SRC_ROOT%\qtbase
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -mp
          nmake /NOLOGO
          nmake /NOLOGO install

      # ===== (SEMPRE) build/instala módulos qtsvg, qtserialport, qtmultimedia =====
      - name: Build & Install Qt modules (qtsvg, qtserialport, qtmultimedia)
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          @echo on
          setlocal EnableExtensions EnableDelayedExpansion
          set "QTDIR=%QT_INSTALL_PREFIX%"
          set "PATH=%QTDIR%\bin;%PATH%"
          set "QMAKEPATH=%QTDIR%\mkspecs"
          where perl.exe >nul 2>&1 || ( echo ERROR: perl.exe not found in PATH & exit /b 2 )
      
          set "MOD_BUILD=C:\qt-build-mods"
          if not exist "%MOD_BUILD%" mkdir "%MOD_BUILD%"
      
          rem helper: cache/stash local + QMAKEFEATURES
          goto after_helpers
          :prep_env
          set "BLD=%~1"
          set "FEATDIR=%~2"
          if not exist "%BLD%" mkdir "%BLD%"
          cd /d "%BLD%"
          set "HOME=%CD%"
          set "LOCALCACHE=%CD%\.qmake.cache"
          if not exist "%LOCALCACHE%" type NUL > "%LOCALCACHE%"
          set "QMAKECACHE=%LOCALCACHE%"
          if not "%FEATDIR%"=="" (
            set "QMAKEFEATURES=%FEATDIR%;%QMAKEPATH%\features"
          ) else (
            set "QMAKEFEATURES=%QMAKEPATH%\features"
          )
          "%QTDIR%\bin\qmake.exe" -v
          echo QMAKEFEATURES=!QMAKEFEATURES!
          goto :eof
          :after_helpers
      
          rem ===== qtsvg (.pro raiz) =====
          call :prep_env "%MOD_BUILD%\qtsvg" "%QT_SRC_ROOT%\qtsvg\mkspecs\features"
          "%QTDIR%\bin\qmake.exe" -d "%QT_SRC_ROOT%\qtsvg\qtsvg.pro" -r -spec win32-msvc ^
            QT_BUILD_EXAMPLES=0 QT_BUILD_TESTS=0 CONFIG-=examples CONFIG-=tests
          if errorlevel 1 (
            echo ERROR: qmake qtsvg failed
            for /r %%F in (config.log) do ( echo --- %%F --- & type "%%F" )
            exit /b 2
          )
          nmake /NOLOGO || ( echo ERROR: nmake qtsvg failed & exit /b 2 )
          nmake /NOLOGO install || ( echo ERROR: nmake install qtsvg failed & exit /b 2 )
      
          rem ===== qtserialport (.pro raiz) =====
          call :prep_env "%MOD_BUILD%\qtserialport" "%QT_SRC_ROOT%\qtserialport\mkspecs\features"
          "%QTDIR%\bin\qmake.exe" -d "%QT_SRC_ROOT%\qtserialport\qtserialport.pro" -r -spec win32-msvc ^
            QT_BUILD_EXAMPLES=0 QT_BUILD_TESTS=0 CONFIG-=examples CONFIG-=tests
          if errorlevel 1 (
            echo ERROR: qmake qtserialport failed
            for /r %%F in (config.log) do ( echo --- %%F --- & type "%%F" )
            exit /b 2
          )
          nmake /NOLOGO || ( echo ERROR: nmake qtserialport failed & exit /b 2 )
          nmake /NOLOGO install || ( echo ERROR: nmake install qtserialport failed & exit /b 2 )
      
          rem ===== qtmultimedia (.pro raiz) — força WMF/WASAPI, desliga Linux/GStreamer =====
          call :prep_env "%MOD_BUILD%\qtmultimedia" "%QT_SRC_ROOT%\qtmultimedia\mkspecs\features"
          
          "%QTDIR%\bin\qmake.exe" -d "%QT_SRC_ROOT%\qtmultimedia\qtmultimedia.pro" -r -spec win32-msvc ^
            QT_BUILD_EXAMPLES=0 QT_BUILD_TESTS=0 CONFIG-=examples CONFIG-=tests ^
            "QT_CONFIG-=pulseaudio gstreamer gstreamer_1_0 gstreamer_0_10 openal resourcepolicy directshow" ^
            QT_FEATURE_pulseaudio=0 QT_FEATURE_openal=0 QT_FEATURE_resourcepolicy=0 ^
            QT_FEATURE_gstreamer=0 QT_FEATURE_gstreamer_1_0=0 QT_FEATURE_gstreamer_0_10=0 ^
            QT_FEATURE_directshow=0 ^
            QT_FEATURE_wmf=1 QT_FEATURE_wasapi=1 ^
            DEFINES+=QT_NO_PULSEAUDIO DEFINES+=QT_NO_OPENAL DEFINES+=QT_NO_GSTREAMER ^
            CONFIG+=wmf CONFIG+=wasapi
          if errorlevel 1 (
            echo ERROR: qmake qtmultimedia failed
            for /r %%F in (config.log) do ( echo --- %%F --- & type "%%F" )
            exit /b 2
          )
          nmake /NOLOGO || ( echo ERROR: nmake qtmultimedia failed & exit /b 2 )
          nmake /NOLOGO install || ( echo ERROR: nmake install qtmultimedia failed & exit /b 2 )

      
          rem ===== valida =====
          set "MSPECS=%QTDIR%\mkspecs\modules"
          set "LIBS=%QTDIR%\lib"
          for %%F in (Qt5Svg.lib Qt5SerialPort.lib Qt5Multimedia.lib) do (
            if not exist "%LIBS%\%%F" ( echo ERROR: missing %%F in %LIBS% & exit /b 3 )
          )
          for %%P in (qt_lib_svg.pri qt_lib_serialport.pri qt_lib_multimedia.pri) do (
            if not exist "%MSPECS%\%%P" ( echo ERROR: missing %%P in %MSPECS% & exit /b 3 )
          )
      
          echo ----- Installed Qt libs -----
          dir /b "%LIBS%\Qt5*.lib"
          echo ----- Installed module PRIs -----
          dir /b "%MSPECS%\qt_lib_*.pri"


  build-app:
    name: Build App (Static, One EXE) + Tag/Release
    needs: qt-static-build
    runs-on: windows-latest
    env:
      PRO_DIR: "build_XX"
      PRO_FILE: "SimulIDE_Build.pro"
      BUILD_DIR: "out_msvc"
      CONFIG: "release"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache (read-only)
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v4"

      # Hard-check: abort early if modules are missing
      - name: Assert required Qt modules exist
        shell: pwsh
        run: |
          $root = $env:QT_INSTALL_PREFIX
          $ok = Test-Path "$root\lib\Qt5Svg.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5SerialPort.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5Multimedia.lib" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_svg.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_serialport.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_multimedia.pri" -PathType Leaf
          if (-not $ok) {
            Get-ChildItem "$root\lib" -Filter "Qt5*.lib" | % Name
            Get-ChildItem "$root\mkspecs\modules" -Filter "qt_lib_*.pri" | % Name
            throw "Required Qt modules not installed in $root"
          }

      - name: Compute version + optionally create tag
        id: ver
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.eventName;
            let ver = '';
            if (ev === 'workflow_dispatch' && core.getInput('version')) {
              ver = core.getInput('version');
            } else if (context.ref && context.ref.startsWith('refs/tags/')) {
              ver = context.ref.replace('refs/tags/','');
            } else {
              ver = `dev${context.runNumber}`;
            }
            ver = ver.replace(/[^0-9A-Za-z._-]/g, '');
            core.exportVariable('APP_VER', ver);

      - name: Prepare build directory (out-of-source)
        shell: pwsh
        run: |
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: Force static CRT (/MT) in .pro (before qmake)
        shell: pwsh
        run: |
          $proPath = Join-Path $env:PRO_DIR $env:PRO_FILE
          if (Test-Path $proPath) {
            Add-Content $proPath "QMAKE_CFLAGS_RELEASE += /MT`n"
            Add-Content $proPath "QMAKE_CXXFLAGS_RELEASE += /MT`n"
            Add-Content $proPath "QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT`n"
          }

      - name: qmake (Static Release)
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          set QMAKEPATH=%QTDIR%\mkspecs
          "%QTDIR%\bin\qmake.exe" -query
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*.pri"
          dir /b "%QTDIR%\lib\Qt5*.lib"
          cd %BUILD_DIR%
          "%QTDIR%\bin\qmake.exe" "%GITHUB_WORKSPACE%\%PRO_DIR%\%PRO_FILE%" -r -spec win32-msvc "CONFIG+=release static"

      - name: Build with nmake
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file) + Package ZIP
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) {
            $exe = Get-ChildItem "$env:GITHUB_WORKSPACE" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                   Sort-Object LastWriteTime -Descending | Select-Object -First 1
          }
          if (-not $exe) { throw "No .exe found after build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          $zip = "SimulIDE-${env:APP_VER}-win64-MSVC-STATIC.zip"
          Compress-Archive -Path $exe.FullName -DestinationPath $zip -Force
          "ZIP_NAME=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.APP_VER }}-win64-MSVC-STATIC
          path: "${{ steps.out.outputs.ZIP_NAME }}"
          if-no-files-found: error
          retention-days: 14

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.publish_release == true)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.APP_VER }}
          files: "${{ steps.out.outputs.ZIP_NAME }}"
          generate_release_notes: true
