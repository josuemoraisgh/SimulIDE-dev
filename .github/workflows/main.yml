name: MSVC Qt Build & Release (SimulIDE)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string
      qt_static_url:
        description: "URL do ZIP do Qt estático 5.15.2 msvc2019_64-static (deixe vazio p/ tentar asset releases/latest)"
        required: false
        type: string
      project_pro:
        description: "Caminho do .pro"
        required: true
        default: "build_XX/SimulIDE_Build.pro"
        type: string
      artifact_dir:
        description: "Pasta com os binários finais"
        required: true
        default: "build_XX/executables/SimulIDE_2.0.0-"
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      QT_VERSION: 5.15.2
      QT_STATIC_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static
      # mude para false se quiser falhar quando não houver Qt estático
      ALLOW_DYNAMIC_FALLBACK: true
      ZIP_NAME_BASE: SimulIDE-windows-${{ inputs.version }}

    steps:
      - name: Habilitar long paths no Git
        shell: cmd
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configurar ambiente MSVC (VS Developer)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # ====== RESOLVER/INSTALAR QT ESTÁTICO OU DINÂMICO ======
      - name: Resolver Qt (preferir estático; fallback para dinâmico)
        id: qt
        shell: pwsh
        env:
          QT_STATIC_PREFIX: ${{ env.QT_STATIC_PREFIX }}
        run: |
          $staticPrefix = "${env:QT_STATIC_PREFIX}"
          $qmakeStatic  = Join-Path $staticPrefix 'bin\qmake.exe'

          function Export-Qt($prefix, $mode) {
            "QTDIR=$prefix" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            (Join-Path $prefix 'bin') | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            "BUILD_MODE=$mode" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

          if (Test-Path $qmakeStatic) {
            Write-Host "Qt estático já presente: $staticPrefix"
            Export-Qt $staticPrefix "static"
            exit 0
          }

          # Tentar baixar Qt estático de input ou asset releases/latest
          $url = "${{ inputs.qt_static_url }}"
          if ([string]::IsNullOrWhiteSpace($url)) {
            $repo = $env:GITHUB_REPOSITORY
            $assetName = "qt-static-5.15.2-msvc2019_64-static.zip"
            $url = "https://github.com/$repo/releases/latest/download/$assetName"
            Write-Host "qt_static_url vazio. Tentando asset: $url"
          } else {
            Write-Host "Baixando Qt estático de $url"
          }

          try {
            $zipPath = Join-Path $env:TEMP 'qt_static.zip'
            Invoke-WebRequest -Uri $url -OutFile $zipPath -UseBasicParsing
            if (-not (Test-Path 'C:\qt-static\5.15.2')) { New-Item -ItemType Directory -Path 'C:\qt-static\5.15.2' | Out-Null }
            Expand-Archive -Path $zipPath -DestinationPath 'C:\' -Force
          } catch {
            Write-Warning "Não foi possível baixar/extrair o Qt estático: $($_.Exception.Message)"
          }

          if (Test-Path $qmakeStatic) {
            Write-Host "Qt estático pronto após download: $staticPrefix"
            Export-Qt $staticPrefix "static"
            exit 0
          }

          if ("${{ env.ALLOW_DYNAMIC_FALLBACK }}" -ne "true") {
            Write-Error "Qt estático não disponível e fallback dinâmico desabilitado."
            exit 1
          }

          # Fallback: instalar Qt DINÂMICO com Multimedia/SerialPort/Svg
          Write-Host "Aplicando fallback: instalando Qt DINÂMICO 5.15.2 MSVC2019 x64..."
          # marcamos BUILD_MODE=dynamic; QTDIR será preenchido pela action debaixo
          "BUILD_MODE=dynamic" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Instalar Qt DINÂMICO (fallback)
        if: env.BUILD_MODE == 'dynamic'
        uses: jurplel/install-qt-action@v4
        with:
          version: 5.15.2
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          modules: qtmultimedia qtserialport qtsvg
          cache: true

      - name: Exportar QTDIR dinâmico e PATH
        if: env.BUILD_MODE == 'dynamic'
        shell: pwsh
        run: |
          # Qt5_Dir é definido pela action install-qt
          if (-not $env:Qt5_Dir) { Write-Error "Qt5_Dir não definido após install-qt-action."; exit 1 }
          "QTDIR=$($env:Qt5_Dir)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          (Join-Path $env:Qt5_Dir 'bin') | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          qmake -v

      # ====== BUILD ======
      - name: Criar diretório de build
        shell: cmd
        run: |
          if not exist build mkdir build

      - name: Configurar (qmake)
        shell: cmd
        run: |
          cd build
          call qmake -v
          if "%BUILD_MODE%"=="static" (
            call qmake "..\${{ inputs.project_pro }}" -spec win32-msvc CONFIG+=release CONFIG+=static
          ) else (
            call qmake "..\${{ inputs.project_pro }}" -spec win32-msvc CONFIG+=release
          )

      - name: Compilar (nmake)
        shell: cmd
        run: |
          cd build
          nmake /NOLOGO

      - name: Mostrar saída de build
        shell: cmd
        run: |
          echo === ARVORE DE BUILD ===
          dir /s /b build
          echo === QMAKE STASH ===
          if exist build\.qmake.stash type build\.qmake.stash
          echo BUILD_MODE=%BUILD_MODE%

      # ====== EMPACOTAMENTO ======
      - name: Preparar artefatos para pacote
        shell: pwsh
        run: |
          $outDir = "${{ inputs.artifact_dir }}"
          if (-not (Test-Path $outDir)) {
            Write-Error "Pasta de artefatos não encontrada: $outDir"
            exit 1
          }
          if (Test-Path "bundle") { Remove-Item -Recurse -Force bundle }
          New-Item -ItemType Directory -Path bundle | Out-Null
          Write-Host "Copiando $outDir -> bundle"
          robocopy $outDir bundle /MIR | Out-Null

          # Se for dinâmico, rodar windeployqt em cada .exe encontrado
          if ($env:BUILD_MODE -eq "dynamic") {
            $exes = Get-ChildItem -Path bundle -Filter *.exe -Recurse
            if (-not $exes) {
              Write-Warning "Nenhum .exe encontrado para windeployqt."
            } else {
              foreach ($e in $exes) {
                Write-Host "windeployqt -> $($e.FullName)"
                & windeployqt.exe -
