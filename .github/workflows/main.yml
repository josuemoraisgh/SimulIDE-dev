name: Windows MSVC (Qt5 Static One-EXE)

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*"]
  pull_request:
    branches: [ "master" ]

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: 5.15.2
      QT_TRIPLET: msvc2019_64
      QT_SRC_DIR: C:\qt-src\qt5
      QT_INSTALL_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static
      # Ajuste os módulos conforme necessidade:
      QT_MODULES: "qtbase qtsvg qtmultimedia qtserialport"

    steps:
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        uses: actions/cache@v4
        id: cache-qt
        with:
          path: ${{ env.QT_INSTALL_PREFIX }}
          key: qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v1

      - name: Skip if cached
        if: steps.cache-qt.outputs.cache-hit == 'true'
        run: echo "Qt static already cached."

      - name: Install Python (for aqt/Perl helpers)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Strawberry Perl (needed by Qt on Windows)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.32'

      - name: Get Qt 5.15.2 source via aqt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          pip install aqtinstall==3.1.*
          python -m aqt tool windows desktop tools_ifw 4.2.0 --outputdir C:\qt-tools
          python -m aqt source windows desktop $env:QT_VER --outputdir C:\qt-src

      - name: Configure Qt (static + static-runtime)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          cd /d %QT_SRC_DIR%
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -mp
          nmake /NOLOGO
          nmake /NOLOGO install

      # Build extra modules (qtsvg, qtmultimedia, qtserialport) as static
      - name: Build Qt modules (SVG, Multimedia, SerialPort)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          for %%M in (%QT_MODULES%) do (
            if exist C:\qt-src\qt5\%%M (
              cd /d C:\qt-src\qt5\%%M
              %QTDIR%\bin\qmake -r
              nmake /NOLOGO
              nmake /NOLOGO install
            )
          )
          echo Qt static built and installed to %QT_INSTALL_PREFIX%

  build-app:
    name: Build App (Static, One EXE)
    needs: qt-static-build
    runs-on: windows-latest
    env:
      BUILD_DIR: build_XX
      CONFIG: release
      QT_INSTALL_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        uses: actions/cache@v4
        with:
          path: ${{ env.QT_INSTALL_PREFIX }}
          key: qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v1

      - name: Prepare build directory
        shell: pwsh
        run: |
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: qmake (Static Release)
        shell: cmd
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          qmake ..\SimulIDE.pro -r -spec win32-msvc "CONFIG+=release static"

      - name: Force static CRT (/MT) just in case
        shell: pwsh
        run: |
          $pro = Get-Content ".\SimulIDE.pro"
          if ($pro -notmatch "QMAKE_CFLAGS_RELEASE.*\/MT") {
            Add-Content ".\SimulIDE.pro" 'QMAKE_CFLAGS_RELEASE += /MT'
            Add-Content ".\SimulIDE.pro" 'QMAKE_CXXFLAGS_RELEASE += /MT'
            Add-Content ".\SimulIDE.pro" 'QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT'
          }

      - name: Build with nmake
        shell: cmd
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file)
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) { throw "Nenhum .exe encontrado no diretório de build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Compute vars (short sha)
        id: vars
        shell: pwsh
        run: |
          $short = $env:GITHUB_SHA.Substring(0,7)
          "short_sha=$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Make ZIP artifact
        id: pack
        shell: pwsh
        run: |
          $zip = "SimulIDE-MSVC-STATIC-${{ steps.vars.outputs.short_sha }}.zip"
          Compress-Archive -Path "${{ steps.out.outputs.EXE }}" -DestinationPath "$zip" -Force
          "ZIP=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-MSVC-STATIC
          path: ${{ steps.pack.outputs.ZIP }}
          if-no-files-found: error
          retention-days: 14

      - name: Create GitHub Release (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pack.outputs.ZIP }}
          generate_release_notes: true
