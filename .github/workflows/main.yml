name: MSVC Static Qt Build & Release (SimulIDE)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string
      qt_static_url:
        description: "URL do ZIP do Qt estático 5.15.2 msvc2019_64-static (deixe vazio para baixar do asset releases/latest)"
        required: false
        type: string
      project_pro:
        description: "Caminho do .pro"
        required: true
        default: "build_XX/SimulIDE_Build.pro"
        type: string
      artifact_dir:
        description: "Pasta com os binários finais"
        required: true
        default: "build_XX/executables/SimulIDE_2.0.0-"
        type: string
      artifact_glob:
        description: "Arquivos a empacotar (glob, separado por vírgula)"
        required: false
        default: "*.exe"
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      QT_VERSION: 5.15.2
      QT_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static
      ZIP_NAME: SimulIDE-windows-static-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        shell: cmd
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configurar ambiente MSVC (VS Developer)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Baixa/usa Qt estático: (1) usa local; (2) usa input qt_static_url; (3) baixa asset releases/latest/qt-static-5.15.2-msvc2019_64-static.zip
      - name: Preparar Qt estático (C:\qt-static\5.15.2\msvc2019_64-static)
        shell: pwsh
        env:
          QT_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static
        run: |
          $qtDir = "${env:QT_PREFIX}"
          $qmake = Join-Path $qtDir 'bin\qmake.exe'
          if (Test-Path $qmake) {
            Write-Host "Qt estático já presente em $qtDir"
          } else {
            $url = "${{ inputs.qt_static_url }}"
            if ([string]::IsNullOrWhiteSpace($url)) {
              # tenta baixar do asset da última release deste repo
              $repo = $env:GITHUB_REPOSITORY
              $assetName = "qt-static-5.15.2-msvc2019_64-static.zip"
              $url = "https://github.com/$repo/releases/latest/download/$assetName"
              Write-Host "qt_static_url vazio. Tentando baixar asset: $url"
            } else {
              Write-Host "Baixando Qt estático de $url"
            }
            $zipPath = Join-Path $env:TEMP 'qt_static.zip'
            try {
              Invoke-WebRequest -Uri $url -OutFile $zipPath -UseBasicParsing
            } catch {
              Write-Error "Falha ao baixar Qt estático de '$url'. Forneça 'qt_static_url' ou faça upload do asset na última release com o nome 'qt-static-5.15.2-msvc2019_64-static.zip'."
              exit 1
            }
            if (-not (Test-Path 'C:\qt-static\5.15.2')) { New-Item -ItemType Directory -Path 'C:\qt-static\5.15.2' | Out-Null }
            Expand-Archive -Path $zipPath -DestinationPath 'C:\' -Force
            if (-not (Test-Path $qmake)) {
              Write-Error "qmake.exe não encontrado após extração. Verifique a estrutura do ZIP (deve conter C:\qt-static\5.15.2\msvc2019_64-static\bin\qmake.exe)."
              exit 1
            }
          }

          # Exporta QTDIR e ajusta PATH
          "QTDIR=$qtDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          (Join-Path $qtDir 'bin') | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          & $qmake -v

      - name: Criar diretório de build
        shell: cmd
        run: |
          if not exist build mkdir build

      - name: Configurar (qmake estático)
        shell: cmd
        env:
          QTDIR: ${{ env.QT_PREFIX }}
        run: |
          cd build
          call qmake -v
          rem Ajuste -spec se o seu kit exigir outro mkspec
          call qmake "..\${{ inputs.project_pro }}" -spec win32-msvc CONFIG+=release CONFIG+=static

      - name: Build (nmake)
        shell: cmd
        run: |
          cd build
          nmake /NOLOGO

      - name: Mostrar saída de build
        shell: cmd
        run: |
          echo === ARVORE DE BUILD ===
          dir /s /b build
          echo === QMAKE STASH ===
          if exist build\.qmake.stash type build\.qmake.stash

      - name: Preparar artefatos para pacote
        shell: cmd
        run: |
          if exist bundle rmdir /s /q bundle
          mkdir bundle
          if not exist "${{ inputs.artifact_dir }}" (
            echo ERRO: Pasta de artefatos nao encontrada: ${{ inputs.artifact_dir }}
            exit /b 1
          )
          echo Copiando saida de ${{ inputs.artifact_dir }} para bundle...
          xcopy /E /I /Y "${{ inputs.artifact_dir }}" "bundle\"
          rem Copie recursos extras aqui se necessario (ex.: configs, qml, icons)
          rem xcopy /E /I /Y "assets\*" "bundle\assets\"

      - name: Gerar ZIP
        shell: cmd
        run: |
          if exist "%ZIP_NAME%" del "%ZIP_NAME%"
          powershell -Command "Compress-Archive -Path 'bundle\*' -DestinationPath '${{ env.ZIP_NAME }}' -Force"
          dir /-C "%ZIP_NAME%"

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      - name: Criar Release com tag ${{ inputs.version }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: SimulIDE static ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
