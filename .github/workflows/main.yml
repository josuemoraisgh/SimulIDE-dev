name: MSVC Static Qt Build & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string
      qt_static_url:
        description: "URL do ZIP do Qt estático 5.15.2 msvc2019_64-static (se vazio, assume já presente em C:/qt-static)"
        required: false
        type: string
      project_pro:
        description: "Caminho do .pro (ex.: SimulIDE.pro ou src/SimulIDE.pro)"
        required: true
        type: string
      artifact_dir:
        description: "Pasta que contém o executável final (ex.: build_XX/executables/SimulIDE_2.0.0-)"
        required: true
        type: string
      artifact_glob:
        description: "Arquivos a empacotar (ex.: *.exe,*.dll,*.ini,resources/**)"
        required: false
        default: "*.exe"
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      QT_VERSION: 5.15.2
      QT_PREFIX: C:\qt-static\5.15.2\msvc2019_64-static
      ZIP_NAME: app-windows-static-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        shell: cmd
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configurar ambiente MSVC (VS Developer)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Preparar Qt estático (C:\qt-static\5.15.2\msvc2019_64-static)
        shell: cmd
        run: |
          if exist "%QT_PREFIX%\bin\qmake.exe" (
            echo Qt static ja presente em %QT_PREFIX%
          ) else (
            if "${{ inputs.qt_static_url }}"=="" (
              echo ERRO: Qt estatico nao encontrado e nenhuma URL foi fornecida (qt_static_url).
              exit /b 1
            )
            echo Baixando Qt estatico de ${{ inputs.qt_static_url }}
            set "TMPZIP=%TEMP%\qt_static.zip"
            powershell -Command "Invoke-WebRequest -Uri '${{ inputs.qt_static_url }}' -OutFile '$env:TMP\\qt_static.zip'"
            if not exist "C:\qt-static\5.15.2" mkdir "C:\qt-static\5.15.2"
            powershell -Command "Expand-Archive -Path '$env:TMP\\qt_static.zip' -DestinationPath 'C:\\' -Force"
            if not exist "%QT_PREFIX%\bin\qmake.exe" (
              echo ERRO: qmake nao encontrado apos extracao. Verifique a estrutura do ZIP.
              exit /b 1
            )
          )
          echo QTDIR=%QT_PREFIX%>> "%GITHUB_ENV%"
          echo %QT_PREFIX%\bin>> "%GITHUB_PATH%"
          where qmake
          qmake -v

      - name: Criar diretório de build
        shell: cmd
        run: |
          if not exist build mkdir build

      - name: Configurar (qmake estatico)
        shell: cmd
        env:
          QTDIR: ${{ env.QT_PREFIX }}
        run: |
          cd build
          call qmake -v
          rem Ajuste -spec se seu kit exigir outro mkspec
          call qmake "..\${{ inputs.project_pro }}" -spec win32-msvc CONFIG+=release CONFIG+=static

      - name: Build (nmake)
        shell: cmd
        run: |
          cd build
          nmake /NOLOGO

      - name: Mostrar saída de build
        shell: cmd
        run: |
          echo === ARVORE DE BUILD ===
          dir /s /b build
          echo === QMAKE STASH ===
          if exist build\.qmake.stash type build\.qmake.stash

      - name: Preparar artefatos para pacote
        shell: cmd
        run: |
          if exist bundle rmdir /s /q bundle
          mkdir bundle
          if not exist "${{ inputs.artifact_dir }}" (
            echo ERRO: Pasta de artefatos nao encontrada: ${{ inputs.artifact_dir }}
            exit /b 1
          )
          echo Copiando saida de ${{ inputs.artifact_dir }} para bundle...
          xcopy /E /I /Y "${{ inputs.artifact_dir }}" "bundle\"
          rem Copie recursos extras aqui se necessario (ex.: configs, qml, icons)
          rem xcopy /E /I /Y "assets\*" "bundle\assets\"

      - name: Gerar ZIP (sem PowerShell multiline)
        shell: cmd
        run: |
          if exist "%ZIP_NAME%" del "%ZIP_NAME%"
          powershell -Command "Compress-Archive -Path 'bundle\*' -DestinationPath '${{ env.ZIP_NAME }}' -Force"
          dir /-C "%ZIP_NAME%"

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      - name: Criar Release com tag ${{ inputs.version }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: static-qt ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
