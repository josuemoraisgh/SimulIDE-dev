name: Windows MSVC Static (Qt5 one-exe) + Tag/Release

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Versão (ex.: v2.0.0-RC1)"
        required: false
        type: string
      publish_release:
        description: "Publicar Release?"
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: "5.15.2"
      QT_TRIPLET: "msvc2019_64"
      QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v2"

      - name: Install Python (for aqt)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Perl (required by Qt build on Windows)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.32"

      - name: Install aqt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install "aqtinstall==3.3.0"

      # >>>>>>>>>>>>>>> FIX: baixar também os módulos do Qt 5 (qtbase + qtmultimedia + qtsvg + qtserialport + qtimageformats)
      - name: Ensure Qt sources present (qtbase + modules)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          if (-not (Test-Path 'C:\qt-src\5.15.2\Src')) {
            python -m aqt list-qt windows desktop 5.15.2
            python -m aqt install-src windows desktop 5.15.2 --outputdir 'C:\qt-src' `
              --archives qtbase qtmultimedia qtsvg qtserialport qtimageformats
          }
          # Sanity: verifique se os módulos realmente existem
          $mods = @('qtbase','qtmultimedia','qtsvg','qtserialport','qtimageformats')
          foreach ($m in $mods) {
            $p = "C:\qt-src\5.15.2\Src\$m"
            if (-not (Test-Path $p)) { throw "Faltou origem do módulo: $p" }
          }

      - name: Configure + Build + Install Qt (static + /MT) if not cached
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          cd /d %QT_SRC_ROOT%\qtbase
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -mp
          nmake /NOLOGO
          nmake /NOLOGO install

      - name: Ensure Qt modules (SVG, Multimedia, SerialPort) - out-of-source + features
        # compila e instala bibliotecas e PRIs dos módulos contra o qtbase estático instalado
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          set MOD_BUILD=C:\qt-build-mods
          if not exist "%MOD_BUILD%" mkdir "%MOD_BUILD%"

          if not exist "%QT_SRC_ROOT%\qtsvg" (
            echo ERRO: Source de qtsvg nao encontrado em %QT_SRC_ROOT%\qtsvg
            exit /b 1
          )
          if not exist "%QT_SRC_ROOT%\qtmultimedia" (
            echo ERRO: Source de qtmultimedia nao encontrado em %QT_SRC_ROOT%\qtmultimedia
            exit /b 1
          )
          if not exist "%QT_SRC_ROOT%\qtserialport" (
            echo ERRO: Source de qtserialport nao encontrado em %QT_SRC_ROOT%\qtserialport
            exit /b 1
          )

          goto after_functions
          :ensure_module
          rem %1 modulo, %2 lib base, %3 pri base
          set MOD=%1
          set LIBBASE=%2
          set PRIBASE=%3
          set MOD_SRC=%QT_SRC_ROOT%\%MOD%
          set MOD_BLD=%MOD_BUILD%\%MOD%
          set NEED=0
          if not exist "%QTDIR%\lib\%LIBBASE%.lib" set NEED=1
          if not exist "%QTDIR%\mkspecs\modules\%PRIBASE%.pri" set NEED=1
          if "%NEED%"=="0" (
            echo %LIBBASE% / %PRIBASE%.pri ja presentes — pulando %MOD%.
            goto :eof
          )
          echo === Construindo %MOD% (faltava lib ou pri) ===
          if not exist "%MOD_BLD%" mkdir "%MOD_BLD%"
          cd /d "%MOD_BLD%"
          set QMAKEFEATURES=%MOD_SRC%\mkspecs\features
          "%QTDIR%\bin\qmake" "%MOD_SRC%\src\src.pro" -r
          nmake /NOLOGO
          nmake /NOLOGO install
          echo === %MOD% instalado. ===
          goto :eof
          :after_functions

          rem qtsvg, qtmultimedia, qtserialport
          call :ensure_module qtsvg Qt5Svg qt_lib_svg
          call :ensure_module qtmultimedia Qt5Multimedia qt_lib_multimedia
          call :ensure_module qtserialport Qt5SerialPort qt_lib_serialport

          echo ----- Present Qt libs -----
          dir /b "%QTDIR%\lib\Qt5*.lib"
          echo ----- Present Qt module PRIs -----
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*.pri"

  build-app:
    name: Build App (Static, One EXE) + Tag/Release
    needs: qt-static-build
    runs-on: windows-latest
    env:
      PRO_DIR: "build_XX"
      PRO_FILE: "SimulIDE_Build.pro"
      BUILD_DIR: "out_msvc"
      CONFIG: "release"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v2"

      # Define APP_VER e cria tag automaticamente se vier por workflow_dispatch com version
      - name: Compute version + optionally create tag
        id: ver
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.eventName;
            let ver = '';
            if (ev === 'workflow_dispatch' && core.getInput('version')) {
              ver = core.getInput('version');
            } else if (context.ref && context.ref.startsWith('refs/tags/')) {
              ver = context.ref.replace('refs/tags/','');
            } else {
              ver = `dev${context.runNumber}`;
            }
            ver = ver.replace(/[^0-9A-Za-z._-]/g, '');
            core.exportVariable('APP_VER', ver);
            core.info(`>> Versão: ${ver}`);
            if (ev === 'workflow_dispatch' && core.getInput('version')) {
              const tagRef = `refs/tags/${ver}`;
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: tagRef });
                core.info(`Tag ${ver} já existe.`);
              } catch (e) {
                if (e.status === 404) {
                  const sha = context.sha;
                  await github.rest.git.createRef({ owner: context.repo.owner, repo: context.repo.repo, ref: tagRef, sha });
                  core.info(`Criada tag ${ver} em ${sha}`);
                } else {
                  throw e;
                }
              }
            }

      - name: Prepare build directory (out-of-source)
        shell: pwsh
        run: |
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: Debug installed Qt modules
        shell: pwsh
        run: |
          Write-Host "Libraries in $env:QT_INSTALL_PREFIX\lib:"
          Get-ChildItem "$env:QT_INSTALL_PREFIX\lib" -Filter "Qt5*.lib" -ErrorAction SilentlyContinue | Sort-Object Name | Select-Object -ExpandProperty Name
          Write-Host "`nModule PRIs in $env:QT_INSTALL_PREFIX\mkspecs\modules:"
          Get-ChildItem "$env:QT_INSTALL_PREFIX\mkspecs\modules" -Filter "qt_lib_*.pri" -ErrorAction SilentlyContinue | Sort-Object Name | Select-Object -ExpandProperty Name

      - name: Force static CRT (/MT) in .pro (before qmake)
        shell: pwsh
        run: |
          $proPath = Join-Path $env:PRO_DIR $env:PRO_FILE
          if (-not (Test-Path $proPath)) { Write-Host "Aviso: $proPath não encontrado. Pulando reforço /MT."; exit 0 }
          Add-Content $proPath "QMAKE_CFLAGS_RELEASE += /MT`n"
          Add-Content $proPath "QMAKE_CXXFLAGS_RELEASE += /MT`n"
          Add-Content $proPath "QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT`n"

      - name: qmake (Static Release) using build_XX/SimulIDE_Build.pro
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          set QMAKEPATH=%QTDIR%\mkspecs
          echo ---- qmake -query ----
          "%QTDIR%\bin\qmake.exe" -query
          echo ---- PRIs ----
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*.pri"
          echo ---- Libs ----
          dir /b "%QTDIR%\lib\Qt5*.lib"
          if not exist "%QTDIR%\mkspecs\modules\qt_lib_multimedia.pri" (
            echo ERRO: qt_lib_multimedia.pri ausente. O job qt-static-build nao gerou o modulo qtmultimedia corretamente.
            exit /b 3
          )
          cd %BUILD_DIR%
          "%QTDIR%\bin\qmake.exe" "%GITHUB_WORKSPACE%\%PRO_DIR%\%PRO_FILE%" -r -spec win32-msvc "CONFIG+=release static"

      - name: Build with nmake
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file)
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) {
            $exe = Get-ChildItem "$env:GITHUB_WORKSPACE" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                   Sort-Object LastWriteTime -Descending | Select-Object -First 1
          }
          if (-not $exe) { throw "Nenhum .exe encontrado após o build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE encontrado: $($exe.FullName)"
          $zip = "SimulIDE-${env:APP_VER}-win64-MSVC-STATIC.zip"
          Compress-Archive -Path $exe.FullName -DestinationPath $zip -Force
          "ZIP_NAME=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "ZIP criado: $zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.APP_VER }}-win64-MSVC-STATIC
          path: "${{ steps.out.outputs.ZIP_NAME }}"
          if-no-files-found: error
          retention-days: 14

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.publish_release == true)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.APP_VER }}
          files: "${{ steps.out.outputs.ZIP_NAME }}"
          generate_release_notes: true
