name: Windows MSVC Static (Qt5 one-exe) + Tag/Release

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g. v2.0.0-RC1). If set, a tag will be created if missing."
        required: false
        type: string
      publish_release:
        description: "Publish GitHub Release?"
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: "5.15.2"
      QT_TRIPLET: "msvc2019_64"
      QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache (qtbase only)
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          # v6 => invalida caches antigos sem zlib
          key: "qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v6"

      - name: Install Python (for aqt) if sources missing
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Perl (required by Qt build)
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.32"

      - name: Install aqt
        run: |
          pip install "aqtinstall==3.1.*"

      - name: Ensure Qt sources present
        shell: pwsh
        run: |
          if (-not (Test-Path 'C:\qt-src\5.15.2\Src')) {
            python -m aqt install-src windows desktop 5.15.2 --outputdir 'C:\qt-src'
          }

      - name: Detect if qtbase has zlib; mark rebuild if missing
        id: needrebuild
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $qmake = Join-Path $env:QT_INSTALL_PREFIX 'bin\qmake.exe'
          if (Test-Path $qmake) {
            $cfg = & $qmake -query QT_CONFIG
            Write-Host "QT_CONFIG=$cfg"
            if ($cfg -notmatch '\bzlib\b') {
              Write-Host ">> zlib ausente — será necessário rebuild do qtbase."
              "rebuild=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
              Write-Host ">> zlib presente — sem rebuild."
              "rebuild=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            }
          } else {
            Write-Host ">> qmake não existe — será necessário rebuild do qtbase."
            "rebuild=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Configure + Build + Install qtbase (static + /MT + zlib)
        if: steps.cache-qt.outputs.cache-hit != 'true' || steps.needrebuild.outputs.rebuild == '1'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          rem limpa prefixo se existir, para evitar mistura de configs
          if exist "%QT_INSTALL_PREFIX%" rmdir /S /Q "%QT_INSTALL_PREFIX%"
          mkdir "%QT_INSTALL_PREFIX%"

          cd /d %QT_SRC_ROOT%\qtbase
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -mp ^
            -qt-zlib
          nmake /NOLOGO
          nmake /NOLOGO install

      - name: Assert zlib enabled
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          echo === QT_CONFIG ===
          qmake -query QT_CONFIG
          echo === Modules present ===
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*"

      - name: Build & Install Qt modules (qtsvg, qtserialport, qtmultimedia)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          $ErrorActionPreference = 'Stop'
          $env:QTDIR = $env:QT_INSTALL_PREFIX
          $env:Path = "$($env:QTDIR)\bin;$env:Path"
          $env:QMAKEPATH = "$($env:QTDIR)\mkspecs"

          # 0) Patch qtmultimedia/configure.json (desliga Linux, liga WMF/WASAPI)
          $cfgPath = Join-Path $env:QT_SRC_ROOT 'qtmultimedia\configure.json'
          if (-not (Test-Path $cfgPath)) { throw "configure.json não encontrado em $cfgPath" }
          $cfg = Get-Content $cfgPath -Raw
          function Disable-Feature([string]$name){
            $pattern = '"'+[regex]::Escape($name)+'"\s*:\s*\{[^}]*\}'
            $replacement = '"'+$name+'": { "condition": "false" }'
            $script:cfg = [regex]::Replace($script:cfg, $pattern, $replacement, 'Singleline')
          }
          function Enable-Feature([string]$name){
            $pattern = '"'+[regex]::Escape($name)+'"\s*:\s*\{[^}]*\}'
            $replacement = '"'+$name+'": { "condition": "true" }'
            $script:cfg = [regex]::Replace($script:cfg, $pattern, $replacement, 'Singleline')
          }
          'gstreamer','gstreamer_1_0','gstreamer_0_10','pulseaudio','openal','resourcepolicy','directshow' | ForEach-Object { Disable-Feature $_ }
          'wmf','wasapi' | ForEach-Object { Enable-Feature $_ }
          Set-Content $cfgPath $cfg -Encoding UTF8
          Write-Host ">> Patched $cfgPath (disable: gst/pulse/openal/resourcepolicy/dshow; enable: wmf/wasapi)"

          # helpers
          function Prep-Env([string]$BuildDir,[string]$FeatDir){
            if (Test-Path $BuildDir) { Remove-Item $BuildDir -Recurse -Force }
            New-Item -ItemType Directory -Path $BuildDir | Out-Null
            Push-Location $BuildDir
            $env:HOME = (Get-Location).Path
            $cache = Join-Path (Get-Location) '.qmake.cache'
            Set-Content $cache '' -Encoding ASCII
            $env:QMAKECACHE = $cache
            if ($FeatDir) {
              $env:QMAKEFEATURES = "$FeatDir;$($env:QMAKEPATH)\features"
            } else {
              $env:QMAKEFEATURES = "$($env:QMAKEPATH)\features"
            }
            & "$env:QTDIR\bin\qmake.exe" -v
            Write-Host "QMAKEFEATURES=$($env:QMAKEFEATURES)"
          }
          function Run-QMake([string]$pro){
            & "$env:QTDIR\bin\qmake.exe" -d -nocache $pro -r -spec win32-msvc "QT_BUILD_EXAMPLES=0" "QT_BUILD_TESTS=0" "CONFIG-=examples" "CONFIG-=tests"
            if ($LASTEXITCODE -ne 0) {
              Write-Host "ERROR: qmake failed for $pro"
              Get-ChildItem -Recurse -Filter config.log | ForEach-Object { Write-Host "--- $($_.FullName) ---"; Get-Content $_.FullName -Raw }
              throw "qmake failed"
            }
          }
          function Run-NMake(){
            & nmake /NOLOGO
            if ($LASTEXITCODE -ne 0) { throw "nmake failed" }
            & nmake /NOLOGO install
            if ($LASTEXITCODE -ne 0) { throw "nmake install failed" }
          }

          # 1) Patch qtsvg: 'system-zlib' -> 'zlib'
          $svgPro = Join-Path $env:QT_SRC_ROOT 'qtsvg\src\svg\svg.pro'
          if (-not (Test-Path $svgPro)) { throw "Arquivo não encontrado: $svgPro" }
          $txt = Get-Content $svgPro -Raw
          $txt2 = $txt -replace 'qtConfig\(system-zlib\)', 'qtConfig(zlib)'
          if ($txt2 -ne $txt) {
            Set-Content $svgPro $txt2 -Encoding UTF8
            Write-Host ">> Patched svg.pro para usar qtConfig(zlib)."
          } else {
            Write-Host ">> svg.pro já não exige system-zlib (nada a mudar)."
          }

          # 2) qtsvg
          Prep-Env -BuildDir 'C:\qt-build-mods\qtsvg' -FeatDir (Join-Path $env:QT_SRC_ROOT 'qtsvg\mkspecs\features')
          Run-QMake (Join-Path $env:QT_SRC_ROOT 'qtsvg\qtsvg.pro')
          Run-NMake
          Pop-Location

          # 3) qtserialport
          Prep-Env -BuildDir 'C:\qt-build-mods\qtserialport' -FeatDir (Join-Path $env:QT_SRC_ROOT 'qtserialport\mkspecs\features')
          Run-QMake (Join-Path $env:QT_SRC_ROOT 'qtserialport\qtserialport.pro')
          Run-NMake
          Pop-Location

          # 4) qtmultimedia (WMF/WASAPI)
          Prep-Env -BuildDir 'C:\qt-build-mods\qtmultimedia' -FeatDir (Join-Path $env:QT_SRC_ROOT 'qtmultimedia\mkspecs\features')
          & "$env:QTDIR\bin\qmake.exe" -d -nocache (Join-Path $env:QT_SRC_ROOT 'qtmultimedia\qtmultimedia.pro') -r -spec win32-msvc `
            "QT_BUILD_EXAMPLES=0" "QT_BUILD_TESTS=0" "CONFIG-=examples" "CONFIG-=tests" `
            "QT_FEATURE_wmf=1" "QT_FEATURE_wasapi=1" `
            "QT_FEATURE_gstreamer=0" "QT_FEATURE_gstreamer_1_0=0" "QT_FEATURE_gstreamer_0_10=0" `
            "QT_FEATURE_pulseaudio=0" "QT_FEATURE_openal=0" "QT_FEATURE_resourcepolicy=0" "QT_FEATURE_directshow=0" `
            "QT_CONFIG-=gstreamer gstreamer_1_0 gstreamer_0_10 pulseaudio openal resourcepolicy directshow" `
            "CONFIG+=wmf" "CONFIG+=wasapi"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: qmake qtmultimedia failed"
            Get-ChildItem -Recurse -Filter config.log | ForEach-Object { Write-Host "--- $($_.FullName) ---"; Get-Content $_.FullName -Raw }
            throw "qmake qtmultimedia failed"
          }
          Run-NMake
          Pop-Location

          # 5) valida
          $mspec = Join-Path $env:QTDIR 'mkspecs\modules'
          $lib   = Join-Path $env:QTDIR 'lib'
          $needLibs = 'Qt5Svg.lib','Qt5SerialPort.lib','Qt5Multimedia.lib'
          $needPris = 'qt_lib_svg.pri','qt_lib_serialport.pri','qt_lib_multimedia.pri'
          foreach ($f in $needLibs) { if (-not (Test-Path (Join-Path $lib $f))) { throw "Missing $f in $lib" } }
          foreach ($p in $needPris) { if (-not (Test-Path (Join-Path $mspec $p))) { throw "Missing $p in $mspec" } }
          Write-Host ">> OK: módulos instalados"

  build-app:
    name: Build App (Static, One EXE) + Tag/Release
    needs: qt-static-build
    runs-on: windows-latest
    env:
      PRO_DIR: "build_XX"
      PRO_FILE: "SimulIDE_Build.pro"
      BUILD_DIR: "out_msvc"
      CONFIG: "release"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache (read-only)
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v6"

      - name: Assert required Qt modules exist
        shell: pwsh
        run: |
          $root = $env:QT_INSTALL_PREFIX
          $ok = Test-Path "$root\lib\Qt5Svg.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5SerialPort.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5Multimedia.lib" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_svg.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_serialport.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_multimedia.pri" -PathType Leaf
          if (-not $ok) {
            Get-ChildItem "$root\lib" -Filter "Qt5*.lib" | % Name
            Get-ChildItem "$root\mkspecs\modules" -Filter "qt_lib_*.pri" | % Name
            throw "Required Qt modules not installed in $root"
          }

      - name: Compute version (env.APP_VER) & ensure tag on dispatch
        id: ver
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.eventName;
            let ver = '';
            if (ev === 'workflow_dispatch' && core.getInput('version')) {
              ver = core.getInput('version');
            } else if (context.ref && context.ref.startsWith('refs/tags/')) {
              ver = context.ref.replace('refs/tags/','');
            } else {
              ver = `dev${context.runNumber}`;
            }
            ver = ver.replace(/[^0-9A-Za-z._-]/g, '');
            core.exportVariable('APP_VER', ver);

      - name: Ensure tag exists (dispatch with version)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const ver = process.env.APP_VER;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${ver}` });
              core.info(`Tag ${ver} already exists`);
            } catch (e) {
              if (e.status === 404) {
                await github.rest.git.createRef({ owner, repo, ref: `refs/tags/${ver}`, sha: context.sha });
                core.info(`Created tag ${ver}`);
              } else { throw e; }
            }

      - name: Prepare build directory (out-of-source)
        shell: pwsh
        run: |
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: Force static CRT (/MT) in .pro (before qmake)
        shell: pwsh
        run: |
          $proPath = Join-Path $env:PRO_DIR $env:PRO_FILE
          if (Test-Path $proPath) {
            Add-Content $proPath "QMAKE_CFLAGS_RELEASE += /MT`n"
            Add-Content $proPath "QMAKE_CXXFLAGS_RELEASE += /MT`n"
            Add-Content $proPath "QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT`n"
          }

      - name: qmake (Static Release)
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          set QMAKEPATH=%QTDIR%\mkspecs
          "%QTDIR%\bin\qmake.exe" -query
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*.pri"
          dir /b "%QTDIR%\lib\Qt5*.lib"
          cd %BUILD_DIR%
          "%QTDIR%\bin\qmake.exe" "%GITHUB_WORKSPACE%\%PRO_DIR%\%PRO_FILE%" -r -spec win32-msvc "CONFIG+=release static"

      - name: Build with nmake
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file) + Package ZIP
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) {
            $exe = Get-ChildItem "$env:GITHUB_WORKSPACE" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                   Sort-Object LastWriteTime -Descending | Select-Object -First 1
          }
          if (-not $exe) { throw "No .exe found after build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          $zip = "SimulIDE-${env:APP_VER}-win64-MSVC-STATIC.zip"
          Compress-Archive -Path $exe.FullName -DestinationPath $zip -Force
          "ZIP_NAME=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.APP_VER }}-win64-MSVC-STATIC
          path: "${{ steps.out.outputs.ZIP_NAME }}"
          if-no-files-found: error
          retention-days: 14

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.publish_release == true)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.APP_VER }}
          files: "${{ steps.out.outputs.ZIP_NAME }}"
          generate_release_notes: true
