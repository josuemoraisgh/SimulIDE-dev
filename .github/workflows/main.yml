name: Windows MSVC Static (Qt5 one-exe) + Tag/Release

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g. v2.0.0-RC1). If set, a tag will be created if missing."
        required: false
        type: string
      publish_release:
        description: "Publish GitHub Release?"
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: "5.15.2"
      QT_TRIPLET: "msvc2019_64"               # mkspec do Qt5; VS2022 funciona com esse triplet
      QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      # --- toolchain ---
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install Python (for aqt)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Perl (required by Qt build)
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.32"

      - name: Install aqt
        run: pip install "aqtinstall==3.1.*"

      # --- cache do Qt estático instalado (qtbase + módulos) ---
      - name: Restore Qt static cache
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v8"

      # --- baixar fontes do Qt se necessário ---
      - name: Ensure Qt sources present
        shell: pwsh
        run: |
          if (-not (Test-Path 'C:\qt-src\5.15.2\Src')) {
            python -m aqt install-src windows desktop 5.15.2 --outputdir 'C:\qt-src'
          }

      # --- detectar necessidade de rebuild (zlib habilitado?) ---
      - name: Detect if qtbase has zlib; mark rebuild if missing
        id: needrebuild
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $qmake = Join-Path $env:QT_INSTALL_PREFIX 'bin\qmake.exe'
          if (Test-Path $qmake) {
            $cfg = & $qmake -query QT_CONFIG
            Write-Host "QT_CONFIG=$cfg"
            if ($cfg -notmatch '\bzlib\b') { "rebuild=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }
            else { "rebuild=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }
          } else {
            "rebuild=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      # --- configurar/compilar/instalar qtbase estático + /MT + zlib + schannel (sem openssl) ---
      - name: Configure + Build + Install qtbase (static + /MT + zlib)
        if: steps.cache-qt.outputs.cache-hit != 'true' || steps.needrebuild.outputs.rebuild == '1'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          if exist "%QT_INSTALL_PREFIX%" rmdir /S /Q "%QT_INSTALL_PREFIX%"
          mkdir "%QT_INSTALL_PREFIX%"
          cd /d %QT_SRC_ROOT%\qtbase
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -no-direct2d -schannel -no-openssl -mp ^
            -qt-zlib
          nmake /NOLOGO
          nmake /NOLOGO install

      - name: Assert zlib enabled
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          echo === QT_CONFIG ===
          qmake -query QT_CONFIG
          echo === Modules present ===
          dir /b "%QTDIR%\mkspecs\modules\qt_lib_*"

      # --- quarantine de pri problemáticos do Direct2D (failsafe) ---
      - name: Disable qdirect2d plugin pri (failsafe)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $mods = Join-Path $env:QT_INSTALL_PREFIX 'mkspecs\modules'
          if (-not (Test-Path $mods)) { exit 0 }
          $targets = @('qt_plugin_qdirect2d.pri','qt_plugin_qdirect2d_private.pri')
          $bakDir = Join-Path $mods '_disabled'
          if (-not (Test-Path $bakDir)) { New-Item -ItemType Directory -Path $bakDir | Out-Null }
          foreach ($t in $targets) {
            $p = Join-Path $mods $t
            if (Test-Path $p) {
              Move-Item -Force $p (Join-Path $bakDir $t)
              Write-Host "Moved $t to _disabled/"
            }
          }
          Write-Host "qdirect2d pri quarantine done."

      # --- Neutralizar pri do QtNetwork que mencionem 'openssl' (failsafe) ---
      - name: Neutralize QtNetwork OpenSSL pri (failsafe)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $mods = Join-Path $env:QT_INSTALL_PREFIX 'mkspecs\modules'
          if (-not (Test-Path $mods)) { exit 0 }
          $bakDir = Join-Path $mods '_disabled'
          if (-not (Test-Path $bakDir)) { New-Item -ItemType Directory -Path $bakDir | Out-Null }
          Get-ChildItem $mods -Filter "qt_lib_network*.pri" | ForEach-Object {
            $t = Get-Content $_.FullName -Raw
            if ($t -match 'openssl') {
              Move-Item -Force $_.FullName (Join-Path $bakDir $_.Name)
              Write-Host "Moved $($_.Name) to _disabled/ (contained 'openssl')"
            }
          }
          Get-ChildItem $mods -Filter "qt_lib_network*.pri" -ErrorAction SilentlyContinue | % FullName

      # --- correção preventiva: garantir zlib habilitado nos .pri ---
      - name: Force-enable zlib feature in module .pri (last resort)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $mspec = Join-Path $env:QT_INSTALL_PREFIX 'mkspecs\modules'
          if (-not (Test-Path $mspec)) { throw "Modules folder not found: $mspec" }
          $targets = @(
            'qt_lib_global.pri','qt_lib_global_private.pri',
            'qt_lib_core.pri','qt_lib_core_private.pri',
            'qt_lib_gui.pri','qt_lib_gui_private.pri',
            'qt_lib_widgets.pri','qt_lib_widgets_private.pri'
          )
          foreach ($t in $targets) {
            $f = Join-Path $mspec $t
            if (-not (Test-Path $f)) { continue }
            $c = Get-Content $f -Raw
            $c = $c -replace '(?m)^(QT\.[^\n]*disabled_features\s*\+=\s*)([^\r\n]*)', {
              param($m); $m.Groups[1].Value + (($m.Groups[2].Value -split '\s+' | ?{$_ -and $_ -ne 'zlib'}) -join ' ')
            }
            if ($c -match '(?m)^(QT\.[^\n]*enabled_features\s*\+=\s*)([^\r\n]*)') {
              $c = $c -replace '(?m)^(QT\.[^\n]*enabled_features\s*\+=\s*)([^\r\n]*)', {
                param($m); $m.Groups[1].Value + ([System.Linq.Enumerable]::Distinct(($m.Groups[2].Value -split '\s+') + @('zlib')) -join ' ')
              }
            } else {
              $c += "`r`nQT.global.enabled_features += zlib`r`n"
            }
            Set-Content $f $c -Encoding UTF8
          }
          Select-String -Path (Join-Path $mspec 'qt_lib_*.pri') -Pattern 'enabled_features.*\bzlib\b' | % { $_.Filename + ': ' + $_.Line }

      # --- desabilitar 'stack-protector-strong' (MSVC não usa esse feature) ---
      - name: Disable unsupported 'stack-protector-strong' (MSVC)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          $mspec = Join-Path $env:QT_INSTALL_PREFIX 'mkspecs\modules'
          if (-not (Test-Path $mspec)) { throw "Modules folder not found: $mspec" }
      
          # Inclui também opengl/openglextensions/printsupport (public e private)
          $targets = @(
            'qt_lib_core_private.pri',
            'qt_lib_gui_private.pri',
            'qt_lib_widgets_private.pri',
            'qt_lib_opengl_private.pri',
            'qt_lib_opengl.pri',
            'qt_lib_openglextensions_private.pri',
            'qt_lib_openglextensions.pri',
            'qt_lib_printsupport_private.pri',
            'qt_lib_printsupport.pri',
            'qt_lib_global.pri'
          )
      
          foreach ($t in $targets) {
            $f = Join-Path $mspec $t
            if (-not (Test-Path $f)) { continue }
      
            # 1) Carrega conteúdo
            $raw = Get-Content $f -Raw
      
            # 2) Remove 'stack-protector-strong' de quaisquer enabled_features
            $lines = $raw -split "`r?`n"
            for ($i=0; $i -lt $lines.Count; $i++) {
              if ($lines[$i] -match 'enabled_features\s*\+=') {
                $lines[$i] = [regex]::Replace($lines[$i], '\bstack-protector-strong\b', '')
                $lines[$i] = [regex]::Replace($lines[$i], '\s{2,}', ' ')
                $lines[$i] = [regex]::Replace($lines[$i], '(\+=)\s+$', '$1 ')
                $lines[$i] = $lines[$i].TrimEnd()
              }
            }
            $c = ($lines -join "`r`n")
      
            # 3) Garante presença em disabled_features
            $prefix =
              if ($t -eq 'qt_lib_global.pri') { 'QT.global' }
              elseif ($t -like 'qt_lib_core_private.pri') { 'QT.core_private' }
              elseif ($t -like 'qt_lib_gui_private.pri') { 'QT.gui_private' }
              elseif ($t -like 'qt_lib_widgets_private.pri') { 'QT.widgets_private' }
              elseif ($t -like 'qt_lib_opengl_private.pri') { 'QT.opengl_private' }
              elseif ($t -like 'qt_lib_openglextensions_private.pri') { 'QT.openglextensions_private' }
              elseif ($t -like 'qt_lib_printsupport_private.pri') { 'QT.printsupport_private' }
              elseif ($t -like 'qt_lib_opengl.pri') { 'QT.opengl' }
              elseif ($t -like 'qt_lib_openglextensions.pri') { 'QT.openglextensions' }
              elseif ($t -like 'qt_lib_printsupport.pri') { 'QT.printsupport' }
              else { 'QT.global' }
      
            if ($c -notmatch 'disabled_features[^\r\n]*\bstack-protector-strong\b') {
              $c += "`r`n$prefix.disabled_features += stack-protector-strong`r`n"
            }
      
            Set-Content $f $c -Encoding UTF8
            Write-Host "Patched $t -> disabled stack-protector-strong"
          }
      
          # Debug: confira onde ficou registrado
          Select-String -Path (Join-Path $mspec 'qt_lib_*.pri') -Pattern 'stack-protector-strong' -ErrorAction SilentlyContinue | % { $_.Filename + ': ' + $_.Line }




      # --- top-level .qmake.conf absoluto para evitar "Project has no top-level .qmake.conf file" ---
      - name: Ensure top-level .qmake.conf exists (Src root)
        shell: pwsh
        env:
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          $top = Join-Path $env:QT_SRC_ROOT '.qmake.conf'
          $srcAbs = ($env:QT_SRC_ROOT -replace '\\','/')
          $lines = @(
            '# auto-generated .qmake.conf (top-level, absolute)'
            "QT_SOURCE_TREE = $srcAbs"
            'include($$QT_SOURCE_TREE/qtbase/.qmake.conf)'
          )
          Set-Content -Path $top -Value ($lines -join "`r`n") -Encoding UTF8
          Write-Host '--- Top-level .qmake.conf ---'
          Get-Content $top -Raw | Write-Host

      # --- build/instalação dos módulos extras (qtsvg, qtserialport, qtmultimedia) ---
      - name: Build & Install Qt modules (qtsvg, qtserialport, qtmultimedia)
        shell: pwsh
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          $ErrorActionPreference = 'Stop'
          $env:QTDIR = $env:QT_INSTALL_PREFIX
          $env:Path = "$($env:QTDIR)\bin;$env:Path"
          $env:QMAKEPATH = "$($env:QTDIR)\mkspecs"

          function New-AbsQMakeConf([string]$TargetDir,[string]$SrcRootAbs){
            $confPath = Join-Path $TargetDir '.qmake.conf'
            $lines = @(
              '# auto-generated .qmake.conf (module/build, absolute)'
              "QT_SOURCE_TREE = $SrcRootAbs"
              'include($$QT_SOURCE_TREE/qtbase/.qmake.conf)'
            )
            Set-Content -Path $confPath -Value ($lines -join "`r`n") -Encoding UTF8
            return $confPath
          }

          function Prep-Env([string]$BuildDir,[string]$ModuleSrcDir){
            if (Test-Path $BuildDir) { Remove-Item $BuildDir -Recurse -Force }
            New-Item -ItemType Directory -Path $BuildDir | Out-Null
            $srcAbs = ($env:QT_SRC_ROOT -replace '\\','/')
            $null = New-AbsQMakeConf -TargetDir $ModuleSrcDir -SrcRootAbs $srcAbs
            $buildConf = New-AbsQMakeConf -TargetDir $BuildDir -SrcRootAbs $srcAbs
            $env:QMAKE_CONF_ABS = ($buildConf -replace '\\','/')
            $cache = Join-Path $BuildDir '.qmake.cache'
            Set-Content $cache '' -Encoding ASCII
            $env:QMAKECACHE = $cache
            $env:QMAKEFEATURES = "$($env:QMAKEPATH)\features"
            Write-Host "QMAKEFEATURES=$($env:QMAKEFEATURES)"
            Write-Host "_QMAKE_CONF_ will be forced to $($env:QMAKE_CONF_ABS)"
          }

          function Run-QMake([string]$pro){
            & "$env:QTDIR\bin\qmake.exe" -d -nocache $pro -r -spec win32-msvc `
              "_QMAKE_CONF_=$($env:QMAKE_CONF_ABS)" `
              "QT_BUILD_EXAMPLES=0" "QT_BUILD_TESTS=0" "CONFIG-=examples" "CONFIG-=tests" `
              "QT_FEATURE_openssl=0" "QT_FEATURE_schannel=1" "QT_FEATURE_direct2d=0" "QT_FEATURE_stack_protector_strong=0"
            if ($LASTEXITCODE -ne 0) {
              Write-Host "ERROR: qmake failed for $pro"
              Get-ChildItem -Recurse -Filter config.log -ErrorAction SilentlyContinue | ForEach-Object {
                Write-Host "--- $($_.FullName) ---"
                Get-Content $_.FullName -Raw
              }
              $mods = Join-Path $env:QTDIR 'mkspecs\modules'
              Get-ChildItem $mods -Filter "qt_lib_network*.pri" -ErrorAction SilentlyContinue | Select-Object -First 3 | ForEach-Object {
                Write-Host "### HEAD of $($_.Name)"
                Get-Content $_.FullName -TotalCount 60
              }
              throw "qmake failed"
            }
          }

          function Run-NMake(){
            & nmake /NOLOGO
            if ($LASTEXITCODE -ne 0) { throw "nmake failed" }
            & nmake /NOLOGO install
            if ($LASTEXITCODE -ne 0) { throw "nmake install failed" }
          }

          # Patch qtmultimedia: desliga deps externas; liga backends nativos
          $cfgPath = Join-Path $env:QT_SRC_ROOT 'qtmultimedia\configure.json'
          if (-not (Test-Path $cfgPath)) { throw "configure.json não encontrado em $cfgPath" }
          $cfg = Get-Content $cfgPath -Raw
          function Disable-Feature([string]$n){ $script:cfg = [regex]::Replace($script:cfg, '"'+[regex]::Escape($n)+'"\s*:\s*\{[^}]*\}', '"'+$n+'": { "condition": "false" }', 'Singleline') }
          function Enable-Feature([string]$n){  $script:cfg = [regex]::Replace($script:cfg, '"'+[regex]::Escape($n)+'"\s*:\s*\{[^}]*\}', '"'+$n+'": { "condition": "true" }',  'Singleline') }
          'gstreamer','gstreamer_1_0','gstreamer_0_10','pulseaudio','openal','resourcepolicy','directshow' | % { Disable-Feature $_ }
          'wmf','wasapi' | % { Enable-Feature $_ }
          Set-Content $cfgPath $cfg -Encoding UTF8
          Write-Host ">> Patched qtmultimedia configure.json"

          # Patch qtsvg: usar 'zlib' em vez de 'system-zlib'
          $svgPro = Join-Path $env:QT_SRC_ROOT 'qtsvg\src\svg\svg.pro'
          if (-not (Test-Path $svgPro)) { throw "Arquivo não encontrado: $svgPro" }
          $txt = Get-Content $svgPro -Raw
          $txt = $txt -replace 'qtConfig\(system-zlib\)', 'qtConfig(zlib)'
          if ($txt -notmatch '(?m)^\s*VERSION\s*=')        { $txt = "VERSION = $$QT_VERSION`r`n$txt" }
          if ($txt -notmatch '(?m)^\s*MODULE_VERSION\s*=') { $txt = "MODULE_VERSION = $$QT_VERSION`r`n$txt" }
          Set-Content $svgPro $txt -Encoding UTF8
          Write-Host ">> Patched qtsvg/src/svg/svg.pro"

          # qtsvg
          $bld = 'C:\qt-build-mods\qtsvg'
          $src = Join-Path $env:QT_SRC_ROOT 'qtsvg'
          Prep-Env -BuildDir $bld -ModuleSrcDir $src
          Push-Location $bld
          Run-QMake (Join-Path $src 'qtsvg.pro')
          Run-NMake
          Pop-Location

          # qtserialport
          $bld = 'C:\qt-build-mods\qtserialport'
          $src = Join-Path $env:QT_SRC_ROOT 'qtserialport'
          Prep-Env -BuildDir $bld -ModuleSrcDir $src
          Push-Location $bld
          Run-QMake (Join-Path $src 'qtserialport.pro')
          Run-NMake
          Pop-Location

          # qtmultimedia
          $bld = 'C:\qt-build-mods\qtmultimedia'
          $src = Join-Path $env:QT_SRC_ROOT 'qtmultimedia'
          Prep-Env -BuildDir $bld -ModuleSrcDir $src
          Push-Location $bld
          & "$env:QTDIR\bin\qmake.exe" -d -nocache (Join-Path $src 'qtmultimedia.pro') -r -spec win32-msvc `
            "_QMAKE_CONF_=$($env:QMAKE_CONF_ABS)" `
            "QT_BUILD_EXAMPLES=0" "QT_BUILD_TESTS=0" "CONFIG-=examples" "CONFIG-=tests" `
            "QT_FEATURE_wmf=1" "QT_FEATURE_wasapi=1" `
            "QT_FEATURE_gstreamer=0" "QT_FEATURE_gstreamer_1_0=0" "QT_FEATURE_gstreamer_0_10=0" `
            "QT_FEATURE_pulseaudio=0" "QT_FEATURE_openal=0" "QT_FEATURE_resourcepolicy=0" "QT_FEATURE_directshow=0" `
            "QT_FEATURE_openssl=0" "QT_FEATURE_schannel=1" "QT_FEATURE_direct2d=0" "QT_FEATURE_stack_protector_strong=0" `
            "QT_CONFIG-=gstreamer gstreamer_1_0 gstreamer_0_10 pulseaudio openal resourcepolicy directshow direct2d openssl stack-protector-strong" `
            "CONFIG+=wmf" "CONFIG+=wasapi"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: qmake qtmultimedia failed"
            Get-ChildItem -Recurse -Filter config.log | % { Write-Host "--- $($_.FullName) ---"; Get-Content $_.FullName -Raw }
            throw "qmake qtmultimedia failed"
          }
          Run-NMake
          Pop-Location

          # valida módulos
          $mspec = Join-Path $env:QTDIR 'mkspecs\modules'
          $lib   = Join-Path $env:QTDIR 'lib'
          $needLibs = 'Qt5Svg.lib','Qt5SerialPort.lib','Qt5Multimedia.lib'
          $needPris = 'qt_lib_svg.pri','qt_lib_serialport.pri','qt_lib_multimedia.pri'
          foreach ($f in $needLibs) { if (-not (Test-Path (Join-Path $lib $f))) { throw "Missing $f in $lib" } }
          foreach ($p in $needPris) { if (-not (Test-Path (Join-Path $mspec $p))) { throw "Missing $p in $mspec" } }
          Write-Host ">> OK: módulos instalados"


  build-app:
    name: Build App (Static, One EXE) + Tag/Release
    needs: qt-static-build
    runs-on: windows-latest
    env:
      PRO_DIR: "build_XX"   # ajuste se seu .pro estiver em outra pasta
      PRO_FILE: "SimulIDE_Build.pro"
      BUILD_DIR: "out_msvc"
      CONFIG: "release"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache (read-only)
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v8"

      - name: Assert required Qt modules exist
        shell: pwsh
        run: |
          $root = $env:QT_INSTALL_PREFIX
          $ok = Test-Path "$root\lib\Qt5Svg.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5SerialPort.lib" -PathType Leaf `
             -and Test-Path "$root\lib\Qt5Multimedia.lib" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_svg.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_serialport.pri" -PathType Leaf `
             -and Test-Path "$root\mkspecs\modules\qt_lib_multimedia.pri" -PathType Leaf
          if (-not $ok) {
            Get-ChildItem "$root\lib" -Filter "Qt5*.lib" | % Name
            Get-ChildItem "$root\mkspecs\modules" -Filter "qt_lib_*.pri" | % Name
            throw "Required Qt modules not installed in $root"
          }

      - name: Validate .pro path and prepare build dir
        shell: pwsh
        run: |
          $proPath = Join-Path $env:PRO_DIR $env:PRO_FILE
          if (-not (Test-Path $proPath)) {
            Write-Host "Given PRO_DIR/PRO_FILE not found, attempting discovery..."
            $found = Get-ChildItem "$env:GITHUB_WORKSPACE" -Recurse -Filter $env:PRO_FILE -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              Write-Host "Discovered: $($found.FullName)"
              $newDir = Split-Path $found.FullName -Parent
              Write-Host "Using PRO_DIR=$newDir"
              "PRO_DIR=$newDir" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              throw "Could not find $($env:PRO_FILE). Set PRO_DIR correctly."
            }
          }
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: Force static CRT (/MT) in .pro (before qmake)
        shell: pwsh
        run: |
          $proPath = Join-Path $env:PRO_DIR $env:PRO_FILE
          Add-Content $proPath "QMAKE_CFLAGS_RELEASE += /MT`n"
          Add-Content $proPath "QMAKE_CXXFLAGS_RELEASE += /MT`n"
          Add-Content $proPath "QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT`n"

      - name: qmake (Static Release)
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          set QMAKEPATH=%QTDIR%\mkspecs
          cd %BUILD_DIR%
          "%QTDIR%\bin\qmake.exe" "%GITHUB_WORKSPACE%\%PRO_DIR%\%PRO_FILE%" -r -spec win32-msvc "CONFIG+=release static"

      - name: Build with nmake
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file) + Package ZIP
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) {
            $exe = Get-ChildItem "$env:GITHUB_WORKSPACE" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                   Sort-Object LastWriteTime -Descending | Select-Object -First 1
          }
          if (-not $exe) { throw "No .exe found after build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          $zip = "SimulIDE-${env:APP_VER}-win64-MSVC-STATIC.zip"
          Compress-Archive -Path $exe.FullName -DestinationPath $zip -Force
          "ZIP_NAME=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.APP_VER }}-win64-MSVC-STATIC
          path: "${{ steps.out.outputs.ZIP_NAME }}"
          if-no-files-found: error
          retention-days: 14

      - name: Compute version (env.APP_VER) & ensure tag on dispatch
        id: ver
        uses: actions/github-script@v7
        with:
          script: |
            const ev = context.eventName;
            let ver = '';
            if (ev === 'workflow_dispatch' && core.getInput('version')) {
              ver = core.getInput('version');
            } else if (context.ref && context.ref.startsWith('refs/tags/')) {
              ver = context.ref.replace('refs/tags/','');
            } else {
              ver = `dev${context.runNumber}`;
            }
            ver = ver.replace(/[^0-9A-Za-z._-]/g, '');
            core.exportVariable('APP_VER', ver);

      - name: Ensure tag exists (dispatch with version)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const ver = process.env.APP_VER;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            try {
              await github.rest.git.getRef({ owner, repo, ref: `tags/${ver}` });
              core.info(`Tag ${ver} already exists`);
            } catch (e) {
              if (e.status === 404) {
                await github.rest.git.createRef({ owner, repo, ref: `refs/tags/${ver}`, sha: context.sha });
                core.info(`Created tag ${ver}`);
              } else { throw e; }
            }

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.publish_release == true)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.APP_VER }}
          files: "${{ steps.out.outputs.ZIP_NAME }}"
          generate_release_notes: true
