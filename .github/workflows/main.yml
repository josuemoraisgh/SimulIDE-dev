name: MinGW Build & Release (qemu-simulide)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v0.1.0)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string
      qemu_ref:
        description: "Ref do QEMU se precisar clonar (ex.: v9.2.0 ou main)"
        required: false
        default: "v9.2.0"
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: windows-latest

    env:
      ZIP_NAME: qemu-simulide-windows-mingw64-${{ inputs.version }}.zip

    steps:
      - name: Habilitar long paths no Git
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Checkout (com submódulos recursivos)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            rsync
            zip
            findutils
            grep
            sed
            gawk
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-pixman
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-libslirp
            mingw-w64-x86_64-gnutls
            mingw-w64-x86_64-libssh
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-capstone
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-bzip2
            mingw-w64-x86_64-ncurses

      - name: Versões das ferramentas
        shell: msys2 {0}
        run: |
          which gcc && gcc --version
          which python3 && python3 --version
          which meson && meson --version
          which ninja && ninja --version
          which ntldd && ntldd --version

      # Descobre a raiz do QEMU no repo; se não achar, clona a ref pedida
      - name: Detectar QEMU_DIR (ou clonar QEMU)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          echo "Procurando QEMU no repositório..."
          QEMU_DIR=""

          # 1) Tente encontrar um 'configure' típico do QEMU
          CANDIDATE=$(find . -maxdepth 3 -type f -name configure | head -n1 || true)
          if [ -n "${CANDIDATE:-}" ]; then
            QEMU_DIR="$(dirname "$CANDIDATE")"
          else
            # 2) Caso não tenha ./configure, tente 'project('qemu' em meson.build'
            CANDIDATE=$(grep -RIl "project('qemu'" --include=meson.build . | head -n1 || true)
            if [ -n "${CANDIDATE:-}" ]; then
              QEMU_DIR="$(dirname "$CANDIDATE")"
            fi
          fi

          if [ -z "$QEMU_DIR" ]; then
            echo "QEMU não encontrado no repo. Fazendo clone raso da ref ${{ inputs.qemu_ref }}..."
            mkdir -p external
            git clone --depth 1 --branch "${{ inputs.qemu_ref }}" https://gitlab.com/qemu-project/qemu.git external/qemu
            QEMU_DIR="$PWD/external/qemu"
          fi

          echo "QEMU_DIR detectado: $QEMU_DIR"
          echo "QEMU_DIR=$QEMU_DIR" >> "$GITHUB_ENV"

      # Configura usando ./configure se existir; senão usa meson setup
      - name: Configurar (configure ou meson)
        shell: msys2 {0}
        working-directory: ${{ env.QEMU_DIR }}
        run: |
          set -euo pipefail
          if [ -x "./configure" ]; then
            echo "Usando ./configure..."
            ./configure \
              --prefix=$MINGW_PREFIX \
              --target-list=xtensa-softmmu \
              --enable-sdl \
              --enable-slirp \
              --enable-capstone \
              --enable-gnutls \
              --enable-libssh \
              --disable-werror
          else
            echo "Sem ./configure. Usando meson setup..."
            # default_targets é equivalente à target-list para meson
            meson setup build \
              --prefix=$MINGW_PREFIX \
              -Ddefault_targets=xtensa-softmmu \
              -Dsdl=enabled \
              -Dslirp=enabled \
              -Dcapstone=enabled \
              -Dgnutls=enabled \
              -Dlibssh=enabled \
              -Dwerror=false
          fi

      - name: Build (ninja ou make)
        shell: msys2 {0}
        working-directory: ${{ env.QEMU_DIR }}
        run: |
          set -euo pipefail
          if [ -x "./configure" ]; then
            make -j"$(nproc || echo 2)"
          else
            ninja -C build
          fi

      - name: Install to staging (DESTDIR)
        shell: msys2 {0}
        working-directory: ${{ env.QEMU_DIR }}
        run: |
          set -euo pipefail
          rm -rf "$GITHUB_WORKSPACE/dist" "$GITHUB_WORKSPACE/bundle"
          mkdir -p "$GITHUB_WORKSPACE/dist"
          if [ -x "./configure" ]; then
            make install DESTDIR="$GITHUB_WORKSPACE/dist"
          else
            ninja -C build install DESTDIR="$GITHUB_WORKSPACE/dist"
          fi

      # Normaliza layout + copia DLLs com ntldd
      - name: Criar bundle flat + copiar DLLs de runtime
        shell: msys2 {0}
        run: |
          set -euo pipefail
          shopt -s nullglob

          # 1) Onde os EXEs foram instalados
          EXE_PATH="$(find dist -type f -name 'qemu-system-xtensa*.exe' -print | head -n1 || true)"
          if [ -z "$EXE_PATH" ]; then
            echo "qemu-system-xtensa*.exe não encontrado em dist/"
            find dist -maxdepth 3 -type f | sed 's/^/  - /'
            exit 1
          fi
          BIN_DIR="$(dirname "$EXE_PATH")"
          echo "BIN_DIR detectado: $BIN_DIR"

          # 2) Pasta final "flat"
          rm -rf bundle
          mkdir -p bundle
          cp -v "$BIN_DIR"/qemu*.exe bundle/ || true

          # 3) share/qemu (ROMs/firmware/gui files)
          if [ -d "$MINGW_PREFIX/share/qemu" ]; then
            mkdir -p bundle/share
            rsync -a "$MINGW_PREFIX/share/qemu" "bundle/share/"
          fi
          if [ -d "$(dirname "$BIN_DIR")/share/qemu" ]; then
            mkdir -p bundle/share
            rsync -a --ignore-existing "$(dirname "$BIN_DIR")/share/qemu" "bundle/share/" || \
            cp -r "$(dirname "$BIN_DIR")/share/qemu" "bundle/share/"
          fi

          # 4) Resolver dependências com ntldd
          mapfile -t DEPS < <(
            find bundle -maxdepth 1 -type f -name '*.exe' -print0 |
            xargs -0 -I{} ntldd -R "{}" |
            sed -n 's/.*=> \([^ ]*\.dll\).*/\1/p' |
            sed 's#\\#/#g' |
            awk 'NF && $0 ~ /\.dll$/ {print}' |
            sort -u
          )
          for d in "${DEPS[@]}"; do
            if [ -f "$d" ]; then
              cp -n "$d" bundle/
            fi
          done

          # 5) Fallback DLLs comuns
          for dll in \
            libbz2-1.dll zlib1.dll libzstd.dll \
            libncursesw6.dll libreadline8.dll \
            libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll \
            SDL2.dll \
            libglib-2.0-0.dll libgobject-2.0-0.dll libgmodule-2.0-0.dll libgthread-2.0-0.dll \
            libgio-2.0-0.dll libintl-8.dll libiconv-2.dll libpcre2-8-0.dll \
            libpixman-1-0.dll libslirp-0.dll \
            libgnutls-30.dll libssh.dll \
            libcapstone.dll \
            libjpeg-8.dll libpng16-16.dll libffi-8.dll \
          ; do
            [ -f "/mingw64/bin/$dll" ] && cp -n "/mingw64/bin/$dll" bundle/ || true
          done

          echo "Conteúdo final da pasta bundle/:"
          ls -al bundle
          echo "Árvore:"
          (cd bundle && find . -maxdepth 2 -type f | sed 's/^/  - /')

      # Package (ZIP via MSYS2, sem PowerShell)
      - name: Gerar ZIP
        shell: msys2 {0}
        run: |
          rm -f "${ZIP_NAME}"
          (cd bundle && zip -r "../${ZIP_NAME}" .)
          ls -lh "${ZIP_NAME}"

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error

      # Create tag + GitHub Release
      - name: Criar Release com tag ${{ inputs.version }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: qemu-simulide ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          target_commitish: ${{ github.sha }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Logs úteis em caso de falha
      - name: Show logs on failure (config.log / meson-log)
        if: ${{ failure() }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          { test -f config.log && echo "===== BEGIN config.log =====" && sed -n '1,400p' config.log && echo "===== END config.log ====="; } || echo "config.log not found."
          { test -f build/meson-logs/meson-log.txt && echo "===== BEGIN meson-log.txt =====" && sed -n '1,400p' build/meson-logs/meson-log.txt && echo "===== END meson-log.txt ====="; } || echo "meson-log.txt not found."
