name: Windows MSVC (Qt5 Static One-EXE)

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "V*", "release-*"]
  pull_request:
    branches: [ "master" ]

jobs:
  qt-static-build:
    name: Build & Cache Qt 5.15.2 Static (MSVC)
    runs-on: windows-latest
    env:
      QT_VER: "5.15.2"
      QT_TRIPLET: "msvc2019_64"
      QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
      QT_MODULES: "qtsvg qtmultimedia qtserialport"

    steps:
      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-${{ env.QT_VER }}-${{ env.QT_TRIPLET }}-msvc2022-opengl-desktop-staticruntime-v1"

      - name: Install Python (for aqt)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Perl (required by Qt build on Windows)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: "5.32"

      - name: Install aqt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          pip install "aqtinstall==3.1.*"

      - name: Download Qt 5.15.2 sources
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          python -m aqt install-src windows desktop 5.15.2 --outputdir "C:\qt-src"

      - name: Configure + Build + Install Qt (static + /MT)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          cd /d %QT_SRC_ROOT%\qtbase
          call configure.bat -prefix "%QT_INSTALL_PREFIX%" -platform win32-msvc ^
            -release -static -static-runtime -opensource -confirm-license ^
            -opengl desktop -nomake tests -nomake examples ^
            -no-icu -no-dbus -no-angle -mp
          nmake /NOLOGO
          nmake /NOLOGO install

      - name: Build Qt modules (SVG, Multimedia, SerialPort)
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
          QT_SRC_ROOT: "C:\\qt-src\\5.15.2\\Src"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          for %%M in (%QT_MODULES%) do (
            if exist %QT_SRC_ROOT%\%%M (
              cd /d %QT_SRC_ROOT%\%%M
              %QTDIR%\bin\qmake -r
              nmake /NOLOGO
              nmake /NOLOGO install
            )
          )

  build-app:
    name: Build App (Static, One EXE)
    needs: qt-static-build
    runs-on: windows-latest
    env:
      BUILD_DIR: "build_XX"
      CONFIG: "release"
      QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Restore Qt static cache
        uses: actions/cache@v4
        with:
          path: "${{ env.QT_INSTALL_PREFIX }}"
          key: "qt5static-5.15.2-msvc2019_64-msvc2022-opengl-desktop-staticruntime-v1"

      - name: Prepare build directory
        shell: pwsh
        run: |
          if (-not (Test-Path $env:BUILD_DIR)) { New-Item -ItemType Directory -Path $env:BUILD_DIR | Out-Null }

      - name: qmake (Static Release)
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          qmake ..\SimulIDE.pro -r -spec win32-msvc "CONFIG+=release static"

      - name: Force static CRT (/MT)
        shell: pwsh
        run: |
          if (-not (Test-Path ".\SimulIDE.pro")) { Write-Host "Aviso: SimulIDE.pro não encontrado na raiz. Pule este reforço."; exit 0 }
          Add-Content ".\SimulIDE.pro" "QMAKE_CFLAGS_RELEASE += /MT`n"
          Add-Content ".\SimulIDE.pro" "QMAKE_CXXFLAGS_RELEASE += /MT`n"
          Add-Content ".\SimulIDE.pro" "QMAKE_LFLAGS_RELEASE += /NODEFAULTLIB:MSVCRT`n"

      - name: Build with nmake
        shell: cmd
        env:
          QT_INSTALL_PREFIX: "C:\\qt-static\\5.15.2\\msvc2019_64-static"
        run: |
          set QTDIR=%QT_INSTALL_PREFIX%
          set PATH=%QTDIR%\bin;%PATH%
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Locate EXE (single-file)
        id: out
        shell: pwsh
        run: |
          $exe = Get-ChildItem ".\${env:BUILD_DIR}" -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) { throw "Nenhum .exe encontrado no diretório de build." }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE encontrado: $($exe.FullName)"

      - name: Compute vars (short sha)
        id: vars
        shell: pwsh
        run: |
          $short = $env:GITHUB_SHA.Substring(0,7)
          "short_sha=$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Make ZIP artifact
        id: pack
        shell: pwsh
        run: |
          $zip = "SimulIDE-MSVC-STATIC-${{ steps.vars.outputs.short_sha }}.zip"
          Compress-Archive -Path "${{ steps.out.outputs.EXE }}" -DestinationPath "$zip" -Force
          "ZIP=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "ZIP criado: $zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-MSVC-STATIC
          path: "${{ steps.pack.outputs.ZIP }}"
          if-no-files-found: error
          retention-days: 14

      - name: Create GitHub Release (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: "${{ steps.pack.outputs.ZIP }}"
          generate_release_notes: true
