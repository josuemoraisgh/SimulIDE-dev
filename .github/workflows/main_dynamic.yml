name: Windows MSVC build & Release (SimulIDE)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag a ser criada (ex.: v1.2.3)"
        required: true
      qt_version:
        description: "Qt Desktop version"
        required: false
        default: "5.15.2"
      qt_target:
        description: "Qt target (ex.: msvc2019_64)"
        required: false
        default: "msvc2019_64"
  push:
    tags:
      - "v*"

jobs:
  build-msvc:
    name: Build MSVC + Qt (${{ inputs.qt_version || '5.15.2' }} ${{ inputs.qt_target || 'msvc2019_64' }})
    runs-on: windows-latest

    env:
      APP_NAME: SimulIDE
      BUILD_DIR: build_XX
      # Saída gerada pelo projeto (SimulIDE costuma criar algo como executables/SimulIDE_x.x.x)
      OUT_DIR: build_XX\\executables
      # Pasta final que vamos zipar:
      DIST_DIR: dist
      # Caminho do exe pós-build (ajustado após build via PowerShell)
      EXE_NAME: SimulIDE.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup MSVC DevCmd (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Instalar Qt (${{ inputs.qt_version || '5.15.2' }} ${{ inputs.qt_target || 'msvc2019_64' }})
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ inputs.qt_version || '5.15.2' }}
          host: windows
          target: desktop
          arch: ${{ inputs.qt_target || 'msvc2019_64' }}
          cache: true
          modules: "qtserialport qtmultimedia qtsvg"

      - name: Mostrar qmake e windeployqt
        shell: bash
        run: |
          which qmake || echo "qmake not found in PATH"
          which windeployqt || echo "windeployqt not found in PATH"
          qmake -v

      - name: Configurar build (qmake)
        shell: cmd
        run: |
          cd %BUILD_DIR%
          qmake ..\SimulIDE.pri -spec win32-msvc CONFIG+=release
          rem Observação: em muitos commits de SimulIDE, basta "qmake" dentro de build_XX.
          rem Se preferir o fluxo recomendado no README:
          rem qmake

      - name: Compilar (nmake)
        shell: cmd
        run: |
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Descobrir pasta do executável
        id: findexe
        shell: pwsh
        run: |
          # Normalmente sai em build_XX/executables/SimulIDE_x.x.x
          $exe = Get-ChildItem -Recurse -Filter $env:EXE_NAME -Path $env:OUT_DIR | Select-Object -First 1
          if (-not $exe) { throw "Não encontrei $env:EXE_NAME em $env:OUT_DIR" }
          $out = Split-Path -Parent $exe.FullName
          "exe_dir=$out" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Executável em: $out"

      - name: Rodar windeployqt (copiar DLLs do Qt)
        shell: pwsh
        run: |
          $exeDir = "${{ steps.findexe.outputs.exe_dir }}"
          & windeployqt "$exeDir\\${{ env.EXE_NAME }}" --release

      - name: Preparar pasta de distribuição
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path $env:DIST_DIR | Out-Null
          $exeDir = "${{ steps.findexe.outputs.exe_dir }}"
          Copy-Item -Recurse -Force "$exeDir\\*" "$env:DIST_DIR\\"
          # Inclui READMEs/licenças úteis se desejar:
          if (Test-Path "COPYING") { Copy-Item COPYING $env:DIST_DIR }
          if (Test-Path "README.md") { Copy-Item README.md $env:DIST_DIR }

      - name: Empacotar ZIP
        shell: pwsh
        run: |
          $zip = "${{ env.APP_NAME }}-windows-msvc.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$env:DIST_DIR\\*" -DestinationPath $zip
          Write-Host "ZIP criado: $zip"
          echo "zip_name=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Publicar artefato (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-msvc
          path: ${{ env.APP_NAME }}-windows-msvc.zip
          if-no-files-found: error
          retention-days: 7

      - name: Criar tag (somente se workflow_dispatch com input)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          TAG_NAME: ${{ inputs.tag }}
        run: |
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME já existe. Prosseguindo para Release."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Criar/atualizar Release e subir ZIP
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}
          name: "SimulIDE ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }} (Windows MSVC)"
          draft: false
          prerelease: false
          files: ${{ env.APP_NAME }}-windows-msvc.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
