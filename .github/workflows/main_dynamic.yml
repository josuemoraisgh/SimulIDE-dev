name: Build & Release (Windows MinGW, portable)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: V2.0.0-RC1)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

env:
  VERSION: ${{ github.event.inputs.version }}

jobs:
  build-windows-mingw:
    name: Windows (MSYS2/MinGW64 + Qt5) – Portable
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Habilitar long paths no Git (preventivo)
        shell: pwsh
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Setup MSYS2 + MinGW64 + Qt5 (+ Tools)
        uses: msys2/setup-msys2@v2
        with:
          release: true
          update: true
          msystem: MINGW64
          path-type: minimal
          cache: true
          install: >-
            base-devel
            git
            zip
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-svg
            mingw-w64-x86_64-qt5-multimedia
            mingw-w64-x86_64-qt5-serialport
            mingw-w64-x86_64-qt5-script
            mingw-w64-x86_64-qt5-tools

      - name: Validar versão
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${VERSION}" ]; then
            echo "Versão não informada."; exit 1
          fi
          echo "Versão/Tag alvo: ${VERSION}"

      - name: Detectar Qt (qmake e windeployqt) + PATH
        id: qt
        shell: msys2 {0}
        run: |
          set -euo pipefail
          export PATH="/mingw64/bin:$PATH"

          # qmake (Qt5)
          if command -v qmake >/dev/null 2>&1; then
            QMAKE=qmake
          elif command -v qmake-qt5 >/dev/null 2>&1; then
            QMAKE=qmake-qt5
          else
            echo "qmake (Qt5) não encontrado."; exit 1
          fi
          echo "Usando qmake: $QMAKE"
          "$QMAKE" -v || true

          # windeployqt (pode vir como windeployqt ou windeployqt-qt5)
          if command -v windeployqt >/dev/null 2>&1; then
            WINDEPLOY=windeployqt
          elif command -v windeployqt-qt5 >/dev/null 2>&1; then
            WINDEPLOY=windeployqt-qt5
          else
            echo "windeployqt não encontrado (nem windeployqt-qt5)."; exit 1
          fi
          echo "Usando windeploy: $WINDEPLOY"

          # Onde estão os plugins do Qt (ex.: /mingw64/share/qt5/plugins ou /mingw64/plugins)
          PLUG_DIR="$("$QMAKE" -query QT_INSTALL_PLUGINS || true)"
          if [ -z "$PLUG_DIR" ] || [ ! -d "$PLUG_DIR" ]; then
            for d in /mingw64/share/qt5/plugins /mingw64/plugins /mingw64/lib/qt5/plugins; do
              [ -d "$d" ] && PLUG_DIR="$d" && break
            done
          fi
          echo "QT_INSTALL_PLUGINS: $PLUG_DIR"
          echo "QT_PLUGIN_PATH=$PLUG_DIR" >> $GITHUB_ENV

          QT_BINDIR="$(dirname "$(which "$QMAKE")")"
          echo "QT_BINDIR=$QT_BINDIR"   >> $GITHUB_ENV
          echo "QMAKE=$QMAKE"           >> $GITHUB_ENV
          echo "WINDEPLOY=$WINDEPLOY"   >> $GITHUB_ENV
          echo "/mingw64/bin"           >> $GITHUB_PATH
          echo "$QT_BINDIR"             >> $GITHUB_PATH

      - name: Preflight (qmake build)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          if [ ! -d "build_XX" ]; then
            echo "Pasta build_XX não encontrada no repositório."; exit 1
          fi
          echo "Arquivos .pro (nível 2):"
          find . -maxdepth 2 -name "*.pro" -print 2>/dev/null || true
          ls -la build_XX || true

      - name: Compilar (qmake + mingw32-make Release)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          export PATH="/mingw64/bin:$PATH"
          cd build_XX
          "$QMAKE" "CONFIG+=release"
          CORES=$(nproc || echo 2)
          mingw32-make -j"${CORES}" release
          echo "Estrutura pós-build:"
          find . -maxdepth 3 -type d -print 2>/dev/null || true

      - name: Localizar pasta do executável
        id: find_outdir
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd build_XX
          shopt -s nullglob
          CANDIDATES=(
            "executables/SimulIDE_*"
            "release/SimulIDE_*"
            "./executables/SimulIDE_*"
            "./release/SimulIDE_*"
          )
          OUT_DIR=""
          for pat in "${CANDIDATES[@]}"; do
            for d in $pat; do
              if [ -d "$d" ]; then OUT_DIR="$d"; break 2; fi
            done
          done
          if [ -z "$OUT_DIR" ]; then
            echo "Não foi possível encontrar a pasta de saída (executables/ ou release/)."
            echo "Conteúdo de build_XX (nível 4):"
            find . -maxdepth 4 -print 2>/dev/null || true
            exit 1
          fi
          echo "Pasta encontrada: $OUT_DIR"
          echo "outdir_unix=$OUT_DIR" >> $GITHUB_OUTPUT
          echo "outdir_win=$(cygpath -w "$OUT_DIR")" >> $GITHUB_OUTPUT

      - name: Localizar executável (.exe) – mais recente com fallback
        id: exe
        shell: msys2 {0}
        run: |
          set -euo pipefail
          pick_latest_exe () {
            local base="$1"
            local cand
            cand=$(find "$base" -maxdepth 3 -type f -iname "*.exe" -printf "%T@ %p\n" 2>/dev/null | sort -nr | awk 'NR==1{print substr($0, index($0,$2))}')
            echo "$cand"
          }
          OUT_DIR="${{ steps.find_outdir.outputs.outdir_unix }}"
          EXE="$(pick_latest_exe "$OUT_DIR")"
          [ -z "$EXE" ] && EXE="$(pick_latest_exe "build_XX")"
          if [ -z "$EXE" ] || [ ! -f "$EXE" ]; then
            echo "Falha ao localizar .exe final."
            find build_XX -type f -iname "*.exe" -print 2>/dev/null || true
            exit 1
          fi
          echo "Executável escolhido: $EXE"
          echo "exe_unix=$EXE"                                 >> $GITHUB_OUTPUT
          echo "exe_win=$(cygpath -w "$EXE")"                  >> $GITHUB_OUTPUT
          echo "exe_dir_unix=$(dirname "$EXE")"                >> $GITHUB_OUTPUT
          echo "exe_dir_win=$(cygpath -w "$(dirname "$EXE")")" >> $GITHUB_OUTPUT

      - name: windeployqt (gerar pasta portable com fallback)
        shell: msys2 {0}
        env:
          QT_PLUGIN_PATH: ${{ env.QT_PLUGIN_PATH }}
        run: |
          set -euo pipefail
          export PATH="/mingw64/bin:$PATH"
          EXE_WIN="${{ steps.exe.outputs.exe_win }}"
          EXE_DIR_UNIX="${{ steps.exe.outputs.exe_dir_unix }}"
          PLUG_DIR="${{ env.QT_PLUGIN_PATH }}"
          echo "EXE_WIN=$EXE_WIN"
          echo "EXE_DIR_UNIX=$EXE_DIR_UNIX"
          echo "QT_PLUGIN_PATH=$PLUG_DIR"

          if [ ! -f "$(cygpath -u "$EXE_WIN")" ]; then
            echo "O caminho do .exe não existe (antes do windeployqt): $EXE_WIN"
            ls -la "$EXE_DIR_UNIX" || true
            exit 1
          fi

          # 1) Tenta sem --release (workaround bug MSYS2)
          if "$WINDEPLOY" --compiler-runtime "$EXE_WIN"; then
            echo "windeployqt OK."
          else
            echo "windeployqt falhou. Aplicando fallback…"

            # 2) Fallback: rodar sem plugins e copiar manualmente os essenciais
            "$WINDEPLOY" --no-plugins --compiler-runtime "$EXE_WIN" || true

            # Copiar platform plugin qwindows.dll (release) e, se existir, qwindowsd.dll (debug) por segurança
            mkdir -p "$EXE_DIR_UNIX/platforms"
            for f in "$PLUG_DIR/platforms/qwindows.dll" "$PLUG_DIR/platforms/qwindowsd.dll"; do
              [ -f "$f" ] && cp -f "$f" "$EXE_DIR_UNIX/platforms/" || true
            done

            # Plugins comuns úteis (se existirem na instalação)
            for sub in imageformats iconengines audio mediaservice printsupport; do
              [ -d "$PLUG_DIR/$sub" ] || continue
              mkdir -p "$EXE_DIR_UNIX/$sub"
              cp -f "$PLUG_DIR/$sub"/*.dll "$EXE_DIR_UNIX/$sub/" 2>/dev/null || true
            done

            # Verificação final do platform plugin
            if [ ! -f "$EXE_DIR_UNIX/platforms/qwindows.dll" ] && [ ! -f "$EXE_DIR_UNIX/platforms/qwindowsd.dll" ]; then
              echo "Falha: platform plugin qwindows*.dll não foi encontrado nem copiado."
              echo "Conteúdo de $EXE_DIR_UNIX/platforms:"
              ls -la "$EXE_DIR_UNIX/platforms" || true
              exit 1
            fi
          fi

      - name: Empacotar ZIP (portable)
        id: zip
        shell: pwsh
        run: |
          $zipName = "SimulIDE-$env:VERSION-windows-mingw64.zip"
          $outDir  = "${{ steps.exe.outputs.exe_dir_win }}"
          $parent  = Split-Path -Path $outDir -Parent
          $zipPath = Join-Path $parent $zipName
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zipPath
          Write-Host "ZIP: $zipPath"
          echo "zip=$zipPath" >> $env:GITHUB_OUTPUT

      - name: Publicar artefato (CI)
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.VERSION }}-windows-mingw64
          path: ${{ steps.zip.outputs.zip }}
          if-no-files-found: error

      - name: Criar Release + Tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: SimulIDE ${{ env.VERSION }} (Windows MinGW, portable)
          body: ${{ github.event.inputs.notes }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ${{ steps.zip.outputs.zip }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
