name: Build & Release (Windows MinGW)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: V2.0.0-RC1)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

env:
  VERSION: ${{ github.event.inputs.version }}

jobs:
  build-windows-mingw:
    name: Windows (MSYS2/MinGW64 + Qt5)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Instala MSYS2, toolchain MinGW64 e Qt5
      - name: Setup MSYS2 + MinGW64 + Qt5
        uses: msys2/setup-msys2@v2
        with:
          release: true
          update: true
          msystem: MINGW64
          install: >-
            base-devel
            git
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-qt5-svg
            mingw-w64-x86_64-qt5-multimedia
            mingw-w64-x86_64-qt5-serialport
            mingw-w64-x86_64-qt5-script
            avr-gcc
            avr-libc

      - name: Validar versão
        shell: bash
        run: |
          if [ -z "${VERSION}" ]; then
            echo "Versão não informada."; exit 1
          fi
          echo "Versão/Tag alvo: ${VERSION}"

      # Compila seguindo o README: entrar em build_XX, rodar qmake e make
      - name: Compilar (qmake + mingw32-make)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd build_XX
          # garante que estamos usando o qmake do MinGW64
          which qmake
          qmake
          # Use o mingw32-make (geralmente é o gerado pelo qmake no MinGW)
          mingw32-make -j"$(nproc || echo 2)"

      - name: Localizar pasta do executável
        id: find_outdir
        shell: msys2 {0}
        run: |
          set -euo pipefail
          # Padrão principal (executables/)
          OUT_DIR=$(ls -d build_XX/executables/SimulIDE_* 2>/dev/null || true)
          # Fallback (release/)
          [ -z "$OUT_DIR" ] && OUT_DIR=$(ls -d build_XX/release/SimulIDE_* 2>/dev/null || true)
          # Se o build gerou dentro do cwd (por variação), tenta sem o prefixo build_XX/
          [ -z "$OUT_DIR" ] && OUT_DIR=$(ls -d executables/SimulIDE_* 2>/dev/null || true)
          [ -z "$OUT_DIR" ] && OUT_DIR=$(ls -d release/SimulIDE_* 2>/dev/null || true)

          if [ -z "$OUT_DIR" ]; then
            echo "Não foi possível encontrar a pasta de saída (executables/ ou release/)."
            exit 1
          fi

          OUT_ABS=$(cygpath -w "$OUT_DIR")
          echo "Pasta encontrada (Windows path): $OUT_ABS"
          echo "outdir=$OUT_ABS" >> $GITHUB_OUTPUT

      - name: Empacotar ZIP
        id: pack
        shell: pwsh
        run: |
          $zipName = "SimulIDE-$env:VERSION-windows-mingw64.zip"
          $outDir  = "${{ steps.find_outdir.outputs.outdir }}"
          $parent  = Split-Path -Path $outDir -Parent
          $base    = Split-Path -Path $outDir -Leaf
          $zipPath = Join-Path $parent $zipName
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zipPath
          Write-Host "ZIP: $zipPath"
          echo "zip=$zipPath" >> $env:GITHUB_OUTPUT

      - name: Publicar artefato (CI)
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.VERSION }}-windows-mingw64
          path: ${{ steps.pack.outputs.zip }}
          if-no-files-found: error

      - name: Criar Release + Tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: SimulIDE ${{ env.VERSION }} (Windows MinGW)
          body: ${{ github.event.inputs.notes }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ${{ steps.pack.outputs.zip }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
