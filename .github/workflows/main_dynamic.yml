name: Build & Release (Windows MinGW, portable slim)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: V2.0.0-RC1)"
        required: true
        type: string
      prerelease:
        description: "Marcar como pré-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

env:
  VERSION: ${{ github.event.inputs.version }}

jobs:
  build-windows-mingw:
    name: Windows (MSYS2/MinGW64 + Qt5) – Portable (slim)
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Habilitar long paths no Git (preventivo)
        shell: pwsh
        run: |
          git config --system core.longpaths true
          git config --global core.longpaths true

      - name: Setup MSYS2 + MinGW64 + Qt5 (+ Tools)
        uses: msys2/setup-msys2@v2
        with:
          release: true
          update: true
          msystem: MINGW64
          path-type: minimal
          cache: true
          install: >-
            base-devel
            git
            zip
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-qt5-base
            mingw-w64-x86_64-qt5-svg
            mingw-w64-x86_64-qt5-multimedia
            mingw-w64-x86_64-qt5-serialport
            mingw-w64-x86_64-qt5-script
            mingw-w64-x86_64-qt5-tools

      - name: Validar versão
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${VERSION}" ]; then
            echo "Versão não informada."; exit 1
          fi
          echo "Versão/Tag alvo: ${VERSION}"

      - name: Detectar Qt (qmake e windeployqt)
        id: qt
        shell: msys2 {0}
        run: |
          set -euo pipefail

          # qmake (Qt5)
          if command -v qmake >/dev/null 2>&1; then
            QMAKE=qmake
          elif command -v qmake-qt5 >/dev/null 2>&1; then
            QMAKE=qmake-qt5
          else
            echo "qmake (Qt5) não encontrado."; exit 1
          fi
          echo "Usando qmake: $QMAKE"
          "$QMAKE" -v || true

          # windeployqt (pode vir como windeployqt ou windeployqt-qt5)
          if command -v windeployqt >/dev/null 2>&1; then
            WINDEPLOY=windeployqt
          elif command -v windeployqt-qt5 >/dev/null 2>&1; then
            WINDEPLOY=windeployqt-qt5
          else
            echo "windeployqt não encontrado (nem windeployqt-qt5)."; exit 1
          fi
          echo "Usando windeploy: $WINDEPLOY"

          QT_BINDIR="$(dirname "$(which "$QMAKE")")"
          echo "QT_BINDIR=$QT_BINDIR" >> $GITHUB_ENV
          echo "QMAKE=$QMAKE" >> $GITHUB_ENV
          echo "WINDEPLOY=$WINDEPLOY" >> $GITHUB_ENV
          echo "$QT_BINDIR" >> $GITHUB_PATH

          which lrelease   || true
          which uic        || true
          which moc        || true
          which "$WINDEPLOY" || true

      - name: Preflight (qmake build)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          if [ ! -d "build_XX" ]; then
            echo "Pasta build_XX não encontrada no repositório."; exit 1
          fi
          echo "Arquivos .pro (nível 2):"
          find . -maxdepth 2 -name "*.pro" -print 2>/dev/null || true
          ls -la build_XX || true

      - name: Compilar (qmake + mingw32-make)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd build_XX
          "$QMAKE"
          CORES=$(nproc || echo 2)
          mingw32-make -j"${CORES}"
          echo "Estrutura pós-build:"
          find . -maxdepth 2 -type d -print 2>/dev/null || true

      - name: Localizar pasta do executável
        id: find_outdir
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd build_XX
          shopt -s nullglob
          CANDIDATES=(
            "executables/SimulIDE_*"
            "release/SimulIDE_*"
            "./executables/SimulIDE_*"
            "./release/SimulIDE_*"
          )
          OUT_DIR=""
          for pat in "${CANDIDATES[@]}"; do
            for d in $pat; do
              if [ -d "$d" ]; then OUT_DIR="$d"; break 2; fi
            done
          done
          if [ -z "$OUT_DIR" ]; then
            echo "Não foi possível encontrar a pasta de saída (executables/ ou release/)."
            echo "Conteúdo de build_XX (nível 4):"
            find . -maxdepth 4 -print 2>/dev/null || true
            exit 1
          fi
          echo "Pasta encontrada: $OUT_DIR"
          echo "outdir_unix=$OUT_DIR" >> $GITHUB_OUTPUT
          echo "outdir_win=$(cygpath -w "$OUT_DIR")" >> $GITHUB_OUTPUT

      - name: Localizar executável (.exe) — robusto
        id: exe
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd build_XX
          OUT_DIR="${{ steps.find_outdir.outputs.outdir_unix }}"
          EXE=$(
            (find "$OUT_DIR" -maxdepth 1 -type f -iname "SimulIDE*.exe" -print 2>/dev/null; \
             find "$OUT_DIR" -maxdepth 1 -type f -iname "simulide*.exe" -print 2>/dev/null; \
             find "$OUT_DIR" -maxdepth 1 -type f -iname "*.exe" -print 2>/dev/null) \
            | head -n1
          )
          if [ -z "$EXE" ]; then
            echo "Nenhum .exe encontrado em $OUT_DIR"
            echo "Listando conteúdo (nível 2):"
            find "$OUT_DIR" -maxdepth 2 -print 2>/dev/null || true
            exit 1
          fi
          echo "Executável encontrado (MSYS): $EXE"
          echo "exe_dir_unix=$OUT_DIR" >> $GITHUB_OUTPUT
          echo "exe_win=$(cygpath -w "$EXE")" >> $GITHUB_OUTPUT
          echo "exe_dir_win=$(cygpath -w "$OUT_DIR")" >> $GITHUB_OUTPUT

      - name: windeployqt (gerar pasta portable – base enxuta)
        shell: msys2 {0}
        run: |
          set -euo pipefail
          echo "Executável (WIN): ${{ steps.exe.outputs.exe_win }}"
          if [ ! -f "$(cygpath -u "${{ steps.exe.outputs.exe_win }}")" ]; then
            echo "O caminho do .exe não existe (antes do windeployqt)."
            ls -la "${{ steps.find_outdir.outputs.outdir_unix }}" || true
            exit 1
          fi
          # Copia DLLs do Qt + runtime MinGW (sem SW OpenGL e sem traduções do Qt)
          "$WINDEPLOY" --release --compiler-runtime --no-opengl-sw --no-translations "${{ steps.exe.outputs.exe_win }}"

      - name: Poda de plugins/diretórios não essenciais (slim)
        shell: pwsh
        run: |
          $outDir = "${{ steps.find_outdir.outputs.outdir_win }}"
          if (-not (Test-Path $outDir)) { throw "Pasta de saída não existe: $outDir" }

          # 1) Remover diretórios raramente necessários em desktop
          $dirsToRemove = @(
            "qml",                # QML/QtQuick (não usado pela app)
            "bearer",             # backends de rede antigos
            "position",           # posicionamento/GPS
            "sensors",            # sensores
            "networkinformation", # info de rede
            "printsupport"        # plugins de impressão (DLL base continua caso copiada)
          )
          foreach ($d in $dirsToRemove) {
            $p = Join-Path $outDir $d
            if (Test-Path $p) { Remove-Item -Recurse -Force $p -ErrorAction SilentlyContinue }
          }

          # 2) Poda de plugins de imagem: manter apenas os essenciais
          $imgDir = Join-Path $outDir "imageformats"
          if (Test-Path $imgDir) {
            Get-ChildItem $imgDir -Filter "*.dll" | ForEach-Object {
              $keep = @("qjpeg.dll","qpng.dll","qico.dll","qsvg.dll")
              if ($keep -notcontains $_.Name.ToLower()) {
                Remove-Item -Force $_.FullName -ErrorAction SilentlyContinue
              }
            }
          }

          # 3) Icon engines: manter SVG (útil p/ ícones SVG)
          $iconDir = Join-Path $outDir "iconengines"
          if (Test-Path $iconDir) {
            Get-ChildItem $iconDir -Filter "*.dll" | ForEach-Object {
              if ($_.Name.ToLower() -ne "qsvgicon.dll") {
                Remove-Item -Force $_.FullName -ErrorAction SilentlyContinue
              }
            }
          }

          # 4) (Opcional) Remover drivers SQL se não usados
          $sqlDir = Join-Path $outDir "sqldrivers"
          if (Test-Path $sqlDir) {
            Remove-Item -Recurse -Force $sqlDir -ErrorAction SilentlyContinue
          }

          # 5) (Opcional) Remover estilos extras (Fusion é leve; Windows é padrão)
          # $stylesDir = Join-Path $outDir "styles"
          # if (Test-Path $stylesDir) {
          #   Get-ChildItem $stylesDir -Filter "*.dll" | ForEach-Object {
          #     if ($_.Name.ToLower() -ne "qwindowsvistastyle.dll" -and $_.Name.ToLower() -ne "qfusionstyle.dll") {
          #       Remove-Item -Force $_.FullName -ErrorAction SilentlyContinue
          #     }
          #   }
          # }

      # - name: (Opcional) strip de DLLs/EXE para reduzir tamanho
      #   shell: msys2 {0}
      #   run: |
      #     set -euo pipefail
      #     OUT="${{ steps.find_outdir.outputs.outdir_unix }}"
      #     find "$OUT" -maxdepth 2 -type f \( -iname "*.dll" -o -iname "*.exe" \) -exec strip -s {} \; 2>/dev/null || true

      - name: Empacotar ZIP (portable slim)
        id: zip
        shell: pwsh
        run: |
          $zipName = "SimulIDE-$env:VERSION-windows-mingw64.zip"
          $outDir  = "${{ steps.find_outdir.outputs.outdir_win }}"
          $parent  = Split-Path -Path $outDir -Parent
          $zipPath = Join-Path $parent $zipName
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path (Join-Path $outDir '*') -DestinationPath $zipPath
          Write-Host "ZIP: $zipPath"
          echo "zip=$zipPath" >> $env:GITHUB_OUTPUT

      - name: Publicar artefato (CI)
        uses: actions/upload-artifact@v4
        with:
          name: SimulIDE-${{ env.VERSION }}-windows-mingw64
          path: ${{ steps.zip.outputs.zip }}
          if-no-files-found: error

      - name: Criar Release + Tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: SimulIDE ${{ env.VERSION }} (Windows MinGW, portable slim)
          body: ${{ github.event.inputs.notes }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ${{ steps.zip.outputs.zip }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
