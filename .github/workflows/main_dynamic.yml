name: Windows MSVC build & Release (SimulIDE)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag a ser criada (ex.: v1.2.3)"
        required: true
      qt_version:
        description: "Qt Desktop version"
        required: false
        default: "5.15.2"
      qt_arch:
        description: "Qt arch (ex.: win64_msvc2019_64)"
        required: false
        default: "win64_msvc2019_64"
      build_static:
        description: "Rodar job experimental de Qt ESTÁTICO?"
        required: false
        default: "false"
  push:
    tags:
      - "v*"

permissions:
  contents: write   # necessário para criar tag e release
  actions: read

concurrency:
  group: simulide-msvc-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-msvc:
    name: Build MSVC + Qt (${{ inputs.qt_version || '5.15.2' }} ${{ inputs.qt_arch || 'win64_msvc2019_64' }})
    runs-on: windows-latest

    env:
      APP_NAME: SimulIDE
      BUILD_DIR: build_XX
      OUT_DIR: build_XX\executables
      DIST_DIR: dist
      EXE_NAME: SimulIDE.exe

    steps:
      - name: Checkout (com submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: MSVC DevCmd (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Diagnóstico opcional para ver módulos disponíveis no feed do Qt 5.15.2
      - name: Diagnóstico do feed Qt
        shell: pwsh
        run: |
          python -m pip install -U aqtinstall==3.3.*
          python -m aqt version
          python -m aqt list-qt windows desktop --arch ${{ inputs.qt_version || '5.15.2' }}
          python -m aqt list-qt windows desktop --modules ${{ inputs.qt_version || '5.15.2' }} ${{ inputs.qt_arch || 'win64_msvc2019_64' }}

      - name: Instalar Qt (${{ inputs.qt_version || '5.15.2' }} / ${{ inputs.qt_arch || 'win64_msvc2019_64' }})
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ inputs.qt_version || '5.15.2' }}
          host: windows
          target: desktop
          arch: ${{ inputs.qt_arch || 'win64_msvc2019_64' }}
          cache: true
          modules: "qtserialport qtmultimedia qtsvg"

      - name: Mostrar qmake e windeployqt
        shell: bash
        run: |
          which qmake || echo "qmake not found in PATH"
          which windeployqt || echo "windeployqt not found in PATH"
          qmake -v

      - name: Configurar build (qmake)
        shell: cmd
        run: |
          if not exist "%BUILD_DIR%" mkdir "%BUILD_DIR%"
          cd %BUILD_DIR%
          rem Se o projeto principal for SimulIDE.pro no raiz:
          qmake ..\SimulIDE.pro -spec win32-msvc CONFIG+=release

      - name: Compilar (nmake)
        shell: cmd
        run: |
          cd %BUILD_DIR%
          nmake /NOLOGO

      - name: Encontrar pasta do executável
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -Filter $env:EXE_NAME -Path $env:OUT_DIR | Select-Object -First 1
          if (-not $exe) {
            Get-ChildItem -Recurse -Path $env:BUILD_DIR | Write-Host
            throw "Não encontrei $env:EXE_NAME em $env:OUT_DIR"
          }
          "exe_dir=$(Split-Path -Parent $exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Executável em: $($exe.FullName)"

      - name: windeployqt (copiar DLLs Qt)
        shell: pwsh
        run: |
          & windeployqt "${{ steps.findexe.outputs.exe_dir }}\${{ env.EXE_NAME }}" --release

      - name: Preparar dist
        shell: pwsh
        run: |
          if (Test-Path $env:DIST_DIR) { Remove-Item -Recurse -Force $env:DIST_DIR }
          New-Item -ItemType Directory -Path $env:DIST_DIR | Out-Null
          Copy-Item -Recurse -Force "${{ steps.findexe.outputs.exe_dir }}\*" "$env:DIST_DIR\"
          if (Test-Path "COPYING") { Copy-Item COPYING $env:DIST_DIR }
          if (Test-Path "LICENSE") { Copy-Item LICENSE $env:DIST_DIR }
          if (Test-Path "README.md") { Copy-Item README.md $env:DIST_DIR }

      - name: Compactar ZIP
        id: zip
        shell: pwsh
        run: |
          $zip = "${{ env.APP_NAME }}-windows-msvc.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$env:DIST_DIR\*" -DestinationPath $zip
          "zip_name=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "ZIP gerado: $zip"

      - name: Publicar artefato (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-msvc
          path: ${{ steps.zip.outputs.zip_name }}
          if-no-files-found: error
          retention-days: 7

      - name: Criar tag (apenas em workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        env:
          TAG_NAME: ${{ inputs.tag }}
        run: |
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME já existe."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Criar/atualizar Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}
          name: "SimulIDE ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }} (Windows MSVC)"
          draft: false
          prerelease: false
          files: ${{ steps.zip.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ---------------- Job opcional (estático) — fica "pausado" por input ----------------
  build-qt-static:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.build_static == 'true' }}
    name: Experimental — Qt 5.15.2 static (MSVC)
    runs-on: windows-latest
    steps:
      - name: Placeholder
        run: |
          echo "Job estático habilitado via input, configure seus passos aqui."
